"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.array.iterator"),require("core-js/modules/es.object.get-own-property-descriptors"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.removeParcel=exports.addParcel=void 0;var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty")),_asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_api=require("../api");function ownKeys(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(b){return Object.getOwnPropertyDescriptor(a,b).enumerable})),c.push.apply(c,d)}return c}function _objectSpread(a){for(var b,c=1;c<arguments.length;c++)b=null==arguments[c]?{}:arguments[c],c%2?ownKeys(Object(b),!0).forEach(function(c){(0,_defineProperty2.default)(a,c,b[c])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(b)):ownKeys(Object(b)).forEach(function(c){Object.defineProperty(a,c,Object.getOwnPropertyDescriptor(b,c))});return a}const DISABLED=()=>!1,DEPLOY_SCRIPTS={predeploy:"npm-run-all clean build:es build:css copy:assets",deploy:"echo \"Not yet implemented - now.sh or surge.sh are supported out of the box\" && exit 1"},BUILD_DEPENDENCIES=["cpy-cli","del-cli","npm-run-all"],PARCEL_DEPENDENCIES=["parcel-bundler","parcel-plugin-purgecss"],addParcel=[{text:"Add Parcel build tasks to package.json",task:function(){var a=(0,_asyncToGenerator2.default)(function*({assetsDirectory:a,outputDirectory:b,port:c,useReact:d}){const e=_objectSpread({},DEPLOY_SCRIPTS,{clean:`del-cli ${b}`,copy:"npm-run-all --parallel copy:assets copy:index","copy:assets":`cpy '${a}/!(css)/**/*.*' '${a}/**/[.]*' ${b} --parents --recursive`,"copy:index":`cpy '${a}/index.html' ${b}`,"prebuild:es":"npm run clean","build:es":`parcel build --out-dir ${b} --public-url ./ ${a}/index.html`,"watch:assets":`watch 'npm run copy' ${a}`,"prewatch:es":"npm run clean","watch:es":`npm run build:es`,serve:`parcel ${a}/index.html --out-dir ${b} --port ${c} --open`,start:"npm-run-all --parallel watch:assets serve"});yield new _api.PackageJsonEditor().extend(d?{alias:{"react-dom":"@hot-loader/react-dom"}}:{}).extend({scripts:e}).commit()});return function task(){return a.apply(this,arguments)}}(),condition:()=>(0,_api.allDoExist)("package.json")},{text:"Configure dev task",task:function(){var a=(0,_asyncToGenerator2.default)(function*({skipInstall:a}){try{yield(0,_api.install)(["stmux"],{dev:!0,skipInstall:a})}catch(a){yield(0,_api.debug)(a,"Failed to install stmux")}yield new _api.PackageJsonEditor().extend({scripts:{dev:"stmux [ \"npm run watch:es\" : \"npm run lint:ing\" ]"}}).commit()});return function task(){return a.apply(this,arguments)}}(),condition:()=>(0,_api.allDoExist)("package.json",".eslintrc.js"),optional:()=>(0,_api.allDoExistSync)("package.json",".eslintrc.js")},{text:"Create PurgeCSS config file",task:function(){var a=(0,_asyncToGenerator2.default)(function*({assetsDirectory:a}){yield new _api.PurgecssConfigEditor().create().extend({content:[`'${a}/index.html'`]}).commit()});return function task(){return a.apply(this,arguments)}}(),condition:DISABLED,optional:DISABLED},{text:"Install Parcel development dependencies",task:({skipInstall:a})=>(0,_api.install)([...BUILD_DEPENDENCIES,...PARCEL_DEPENDENCIES],{dev:!0,skipInstall:a}),condition:({isNotOffline:a,skipInstall:b})=>!b&&a&&(0,_api.allDoExist)("package.json")}];exports.addParcel=addParcel;const removeParcel=[{text:"Remove Parcel build tasks from package.json",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){yield new _api.PackageJsonEditor().extend({scripts:{clean:void 0,copy:void 0,"copy:assets":void 0,"copy:index":void 0,"watch:assets":void 0,dev:void 0,"prebuild:es":void 0,"build:es":void 0,"prewatch:es":void 0,"watch:es":void 0,serve:void 0,start:void 0}}).commit()});return function task(){return a.apply(this,arguments)}}(),condition:()=>(0,_api.allDoExist)("package.json")},{text:"Delete PurgeCSS config file",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){yield new _api.PurgecssConfigEditor().delete().commit()});return function task(){return a.apply(this,arguments)}}(),condition:DISABLED,optional:DISABLED},{text:"Uninstall Parcel dependencies",task:()=>(0,_api.uninstall)([...BUILD_DEPENDENCIES,...PARCEL_DEPENDENCIES,"stmux"]),condition:({skipInstall:a})=>!a&&(0,_api.allDoExist)("package.json")&&new _api.PackageJsonEditor().hasAll(...PARCEL_DEPENDENCIES),optional:({skipInstall:a})=>!a}];exports.removeParcel=removeParcel;var _default=addParcel;exports.default=_default;