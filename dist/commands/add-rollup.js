"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.array.iterator"),require("core-js/modules/es.object.get-own-property-descriptors"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.removeRollup=exports.addRollup=void 0;var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty")),_asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_path=require("path"),_api=require("../api");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable})),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null==arguments[i]?{}:arguments[i],i%2?ownKeys(Object(source),!0).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key])}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))});return target}const DEPLOY_SCRIPTS={predeploy:"npm-run-all clean build:es build:css copy:assets",deploy:"echo \"Not yet implemented - now.sh or surge.sh are supported out of the box\" && exit 1"},BUILD_DEPENDENCIES=["cpy-cli","del-cli","npm-run-all"],ROLLUP_DEPENDENCIES=["rollup","rollup-plugin-babel","rollup-plugin-commonjs","rollup-plugin-node-resolve","rollup-plugin-replace","rollup-plugin-terser"],addRollup=[{text:"Create Rollup configuration file",task:function(){var _ref=(0,_asyncToGenerator2.default)(function*({outputDirectory,sourceDirectory,useReact}){const input=`'${sourceDirectory}/main.js${useReact?"x":""}'`,plugins=[,`commonjs()`];// the commonjs plugin needs to be the second item in the array
yield new _api.RollupConfigEditor().create().prepend(`import {terser} from 'rollup-plugin-terser';`).prepend(`import replace from 'rollup-plugin-replace';`).prepend(`import resolve from 'rollup-plugin-node-resolve';`).prepend(`import commonjs from 'rollup-plugin-commonjs';`).prepend(`import babel from 'rollup-plugin-babel';`).prepend(`/* eslint-disable max-len */`).extend({input,output:{file:`'${outputDirectory}/bundle.min.js'`}}).extend(useReact?{plugins}:{}).commit()});return function task(){return _ref.apply(this,arguments)}}(),condition:()=>(0,_api.allDoNotExist)("webpack.config.js")},{text:"Add Rollup build tasks to package.json",task:function(){var _ref2=(0,_asyncToGenerator2.default)(function*({assetsDirectory,outputDirectory,sourceDirectory}){const scripts=_objectSpread(_objectSpread({},DEPLOY_SCRIPTS),{},{clean:`del-cli ${outputDirectory}`,copy:"npm-run-all --parallel copy:assets copy:index","copy:assets":`cpy \"${assetsDirectory}/!(css)/**/*.*\" \"${assetsDirectory}/**/[.]*\" ${outputDirectory} --parents --recursive`,"copy:index":`cpy \"${assetsDirectory}/index.html\" ${outputDirectory}`,"prebuild:es":`del-cli ${(0,_path.join)(outputDirectory,assetsDirectory)}`,"build:es":"rollup -c","postbuild:es":"npm run copy","watch:assets":`watch \"npm run copy\" ${assetsDirectory}`,"watch:es":`watch \"npm run build:es\" ${sourceDirectory}`});yield new _api.PackageJsonEditor().extend({scripts}).commit()});return function task(){return _ref2.apply(this,arguments)}}(),condition:()=>(0,_api.allDoExist)("package.json")},{text:"Configure dev task",task:function(){var _ref3=(0,_asyncToGenerator2.default)(function*({skipInstall}){try{yield(0,_api.install)(["stmux"],{dev:!0,skipInstall})}catch(err){yield(0,_api.debug)(err,"Failed to install stmux")}yield new _api.PackageJsonEditor().extend({scripts:{dev:"stmux [ \"npm run watch:es\" : \"npm run lint:ing\" ]"}}).commit()});return function task(){return _ref3.apply(this,arguments)}}(),condition:()=>(0,_api.allDoExist)("package.json",".eslintrc.js"),optional:()=>(0,_api.allDoExistSync)("package.json",".eslintrc.js")},{text:"Install Rollup dependencies",task:({skipInstall})=>(0,_api.install)([...BUILD_DEPENDENCIES,...ROLLUP_DEPENDENCIES],{dev:!0,skipInstall}),condition:({skipInstall})=>!skipInstall&&(0,_api.allDoExist)("package.json")}];exports.addRollup=addRollup;const removeRollup=[{text:"Delete Rollup configuration file",task:function(){var _ref4=(0,_asyncToGenerator2.default)(function*(){yield new _api.RollupConfigEditor().delete().commit()});return function task(){return _ref4.apply(this,arguments)}}(),condition:()=>(0,_api.allDoExist)("rollup.config.js")},{text:"Remove Rollup build tasks from package.json",task:function(){var _ref5=(0,_asyncToGenerator2.default)(function*(){yield new _api.PackageJsonEditor().extend({scripts:{copy:void 0,"copy:assets":void 0,"copy:index":void 0,"watch:assets":void 0,dev:void 0,"prebuild:es":void 0,"build:es":void 0,"postbuild:es":void 0,"watch:es":void 0}}).commit()});return function task(){return _ref5.apply(this,arguments)}}(),condition:()=>(0,_api.allDoExist)("package.json")},{text:"Uninstall Rollup dependencies",task:()=>(0,_api.uninstall)([...BUILD_DEPENDENCIES,...ROLLUP_DEPENDENCIES,"stmux"]),condition:()=>(0,_api.allDoExist)("package.json")&&new _api.PackageJsonEditor().hasAll(...ROLLUP_DEPENDENCIES)}];exports.removeRollup=removeRollup;var _default=addRollup;exports.default=_default;