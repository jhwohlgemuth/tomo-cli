"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.string.replace"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.createFunctionModuleEditor=exports.createModuleEditor=void 0;var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty")),_path=require("path"),_fsExtra=require("fs-extra"),_lodash=_interopRequireDefault(require("lodash.merge")),_common=require("./common"),_BasicEditor=_interopRequireDefault(require("./BasicEditor"));const{assign}=Object,silent=()=>{};class Common extends _BasicEditor.default{create(){const self=this,{contents,path}=self;return self.created||(0,_fsExtra.existsSync)(path)||self.write(contents),self}read(){const{fs,path}=this;return fs.exists(path)?fs.read(path):""}write(contents){const self=this,{esm,fs,path,prependedContents,queue}=self,exportString=esm?"export default ":"module.exports = ",formatted=`${prependedContents}${exportString}${(0,_common.format)(contents)}`.replace(/\r*\n$/g,";");return queue.add(()=>fs.write(path,formatted)).then(()=>self.created=(0,_fsExtra.existsSync)(path)).catch(silent),assign(self,{contents})}extend(code){return this.contents=(0,_lodash.default)(this.contents,code),this.write(this.contents),this}prepend(code){const self=this,{contents,prependedContents}=self;return"string"==typeof code&&0<code.length&&(self.prependedContents=`${code}\n${prependedContents}`.replace(/\n*$/,"\n\n")),self.write(contents)}}/**
 * Create and edit a JS module with a fluent API
 * @param {string} filename Name of file to edit
 * @param {string} [contents=''] Contents of file
 * @param {Object} options Options to configure module
 * @param {boolean} [options.esm=false] Select to use 'module.exports =' (false) or 'export default' (true)
 * @return {ModuleEditor} ModuleEditor class (extends {@link BasicEditor})
 */const createModuleEditor=(filename,contents="",options={esm:!1})=>{var _temp;return _temp=class extends Common{constructor(cwd=process.cwd()){super(),(0,_defineProperty2.default)(this,"prependedContents",""),(0,_defineProperty2.default)(this,"created",!1);const{esm}=options,path=(0,_path.join)(cwd,filename);assign(this,{contents,esm,path})}},_temp};/**
 * Create and edit a JS module (with function export) using a fluent API
 * @param {string} filename Name of file to edit
 * @param {string} [contents=''] Contents of file
 * @param {Object} options Options to configure module
 * @param {string[]} [options.params=[]] Params to use as function parameters. ex: ['a', 'b'] becomes (a, b) => {}
 * @param {boolean} [options.esm=false] Select to use 'module.exports =' (false) or 'export default' (true)
 * @return {ModuleEditor} ModuleEditor class (extends {@link BasicEditor})
 */exports.createModuleEditor=createModuleEditor;const createFunctionModuleEditor=(filename,contents="",options={params:[],esm:!1})=>{var _temp2;return _temp2=class extends Common{constructor(cwd=process.cwd()){super(),(0,_defineProperty2.default)(this,"prependedContents",""),(0,_defineProperty2.default)(this,"created",!1);const{esm,params}=options,path=(0,_path.join)(cwd,filename);assign(this,{contents,esm,path,params:params||[]})}write(contents){const self=this,{esm,fs,params,path,prependedContents,queue}=self,exportString=esm?`export default (${params.join(", ")}) => (`:`module.exports = (${params.join(", ")}) => (`,formatted=`${prependedContents}${exportString}${(0,_common.format)(contents)}`.replace(/\r*\n$/g,");");return queue.add(()=>fs.write(path,formatted)).then(()=>self.created=(0,_fsExtra.existsSync)(path)).catch(silent),assign(self,{contents})}},_temp2};exports.createFunctionModuleEditor=createFunctionModuleEditor;var _default=createModuleEditor;exports.default=_default;