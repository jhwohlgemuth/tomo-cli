"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.string.replace"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.createFunctionModuleEditor=exports.createModuleEditor=void 0;var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty")),_path=require("path"),_fsExtra=require("fs-extra"),_lodash=_interopRequireDefault(require("lodash.merge")),_common=require("./common"),_BasicEditor=_interopRequireDefault(require("./BasicEditor"));const{assign}=Object,silent=()=>{};class Common extends _BasicEditor.default{create(){const a=this,{contents:b,path:c}=a;return a.created||(0,_fsExtra.existsSync)(c)||a.write(b),a}read(){const{fs:a,path:b}=this;return a.exists(b)?a.read(b):""}write(a){const b=this,{esm:c,fs:d,path:e,prependedContents:f,queue:g}=b,h=c?"export default ":"module.exports = ",i=`${f}${h}${(0,_common.format)(a)}`.replace(/\r*\n$/g,";");return g.add(()=>d.write(e,i)).then(()=>b.created=(0,_fsExtra.existsSync)(e)).catch(silent),assign(b,{contents:a})}extend(a){return this.contents=(0,_lodash.default)(this.contents,a),this.write(this.contents),this}prepend(a){const b=this,{contents:c,prependedContents:d}=b;return b.prependedContents=`${a}\n${d}`.replace(/\n*$/,"\n\n"),b.write(c)}}/**
 * Create and edit a JS module with a fluent API
 * @param {string} filename Name of file to edit
 * @param {string} [contents=''] Contents of file
 * @param {Object} options Options to configure module
 * @param {boolean} [options.esm=false] Select to use 'module.exports =' (false) or 'export default' (true)
 * @return {ModuleEditor} ModuleEditor class (extends {@link BasicEditor})
 */const createModuleEditor=(a,b="",c={esm:!1})=>{var d;return d=class extends Common{constructor(d=process.cwd()){super(),(0,_defineProperty2.default)(this,"prependedContents",""),(0,_defineProperty2.default)(this,"created",!1);const{esm:e}=c,f=(0,_path.join)(d,a);assign(this,{contents:b,esm:e,path:f})}},d};/**
 * Create and edit a JS module (with function export) using a fluent API
 * @param {string} filename Name of file to edit
 * @param {string} [contents=''] Contents of file
 * @param {Object} options Options to configure module
 * @param {string[]} [options.params=[]] Params to use as function parameters. ex: ['a', 'b'] becomes (a, b) => {}
 * @param {boolean} [options.esm=false] Select to use 'module.exports =' (false) or 'export default' (true)
 * @return {ModuleEditor} ModuleEditor class (extends {@link BasicEditor})
 */exports.createModuleEditor=createModuleEditor;const createFunctionModuleEditor=(a,b="",c={params:[],esm:!1})=>{var d;return d=class extends Common{constructor(d=process.cwd()){super(),(0,_defineProperty2.default)(this,"prependedContents",""),(0,_defineProperty2.default)(this,"created",!1);const{esm:e,params:f}=c,g=(0,_path.join)(d,a);assign(this,{contents:b,esm:e,path:g,params:f||[]})}write(a){const b=this,{esm:c,fs:d,params:e,path:f,prependedContents:g,queue:h}=b,i=c?`export default (${e.join(", ")}) => (`:`module.exports = (${e.join(", ")}) => (`,j=`${g}${i}${(0,_common.format)(a)}`.replace(/\r*\n$/g,");");return h.add(()=>d.write(f,j)).then(()=>b.created=(0,_fsExtra.existsSync)(f)).catch(silent),assign(b,{contents:a})}},d};exports.createFunctionModuleEditor=createFunctionModuleEditor;var _default=createModuleEditor;exports.default=_default;