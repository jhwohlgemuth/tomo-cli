[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/api.js",
    "content": "import * as utils from './utils';\nimport * as common from './utils/common';\n\nexport default {\n    ...common,\n    ...utils\n};",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/api.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/commands/add-a11y.js",
    "content": "import {\n    PackageJsonEditor,\n    install,\n    uninstall\n} from '../utils';\nimport {allDoExist} from '../utils/common';\n/**\n * @type {task[]}\n * @see http://pa11y.org/\n */\nexport const addA11y = [\n    {\n        text: 'Add accessibility tasks to package.json',\n        task: async ({outputDirectory}) => {\n            const scripts = {\n                'lint:aria': `pa11y ${outputDirectory}/index.html`\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Install pa11y for checking accessibility rules',\n        task: ({skipInstall}) => install(['pa11y'], {dev: true, skipInstall}),\n        condition: ({isNotOffline}) => isNotOffline && allDoExist('package.json')\n    }\n];\nexport const removeA11y = [\n    {\n        text: 'Remove accessibility tasks from package.json',\n        task: async () => {\n            const scripts = {\n                'lint:aria': undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Uninstall pa11y',\n        task: () => uninstall(['pa11y']),\n        condition: ({skipInstall}) => !skipInstall && allDoExist('package.json') && (new PackageJsonEditor()).hasAll('pa11y'),\n        optional: ({skipInstall}) => !skipInstall\n    }\n];\nexport default addA11y;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-a11y.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "addA11y",
    "memberof": "src/commands/add-a11y.js",
    "static": true,
    "longname": "src/commands/add-a11y.js~addA11y",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-a11y.js",
    "importStyle": "{addA11y}",
    "description": "",
    "see": [
      "http://pa11y.org/"
    ],
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "removeA11y",
    "memberof": "src/commands/add-a11y.js",
    "static": true,
    "longname": "src/commands/add-a11y.js~removeA11y",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-a11y.js",
    "importStyle": "{removeA11y}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/commands/add-browsersync.js",
    "content": "import {PackageJsonEditor, install, uninstall} from '../utils';\nimport {allDoExist, someDoExistSync} from '../utils/common';\n\nconst BROWSERSYNC_DEPENDENCIES = [\n    'browser-sync',\n    'npm-run-all'\n];\n/**\n * @type {task[]}\n * @see https://www.browsersync.io/docs/command-line\n */\nexport const addBrowsersync = [\n    {\n        text: 'Add Browsersync tasks to package.json',\n        task: async ({outputDirectory, port}) => {\n            const scripts = {\n                prestart: 'npm run build:es',\n                start: `npm-run-all --parallel watch:es watch:css serve`,\n                serve: `browser-sync start --server ${outputDirectory} --files ${outputDirectory} --port ${port}`\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: ({useParcel}) => allDoExist('package.json', 'postcss.config.js') && (someDoExistSync('webpack.config.js', 'rollup.config.js') || useParcel) // eslint-disable-line max-len\n    },\n    {\n        text: 'Install Browsersync dependencies',\n        task: ({skipInstall}) => install(BROWSERSYNC_DEPENDENCIES, {dev: true, skipInstall}),\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    }\n];\nexport const removeBrowsersync = [\n    {\n        text: 'Remove Browsersync tasks from package.json',\n        task: async () => {\n            const scripts = {\n                prestart: undefined,\n                start: undefined,\n                serve: undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Uninstall Browsersync dependencies',\n        task: () => uninstall(BROWSERSYNC_DEPENDENCIES),\n        condition: ({skipInstall}) => !skipInstall && allDoExist('package.json') && (new PackageJsonEditor()).hasAll(...BROWSERSYNC_DEPENDENCIES),\n        optional: ({skipInstall}) => !skipInstall\n    }\n];\nexport default addBrowsersync;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-browsersync.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "BROWSERSYNC_DEPENDENCIES",
    "memberof": "src/commands/add-browsersync.js",
    "static": true,
    "longname": "src/commands/add-browsersync.js~BROWSERSYNC_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-browsersync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "addBrowsersync",
    "memberof": "src/commands/add-browsersync.js",
    "static": true,
    "longname": "src/commands/add-browsersync.js~addBrowsersync",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-browsersync.js",
    "importStyle": "{addBrowsersync}",
    "description": "",
    "see": [
      "https://www.browsersync.io/docs/command-line"
    ],
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "removeBrowsersync",
    "memberof": "src/commands/add-browsersync.js",
    "static": true,
    "longname": "src/commands/add-browsersync.js~removeBrowsersync",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-browsersync.js",
    "importStyle": "{removeBrowsersync}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/commands/add-cypress/index.js",
    "content": "import {join} from 'path';\nimport {EslintConfigModuleEditor, PackageJsonEditor, install, uninstall} from '../../utils';\nimport {allDoExist, allDoNotExist} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\nimport createJsonEditor from '../../utils/createJsonEditor';\n\nconst ALWAYS = () => true;\nconst CYPRESS_DEPENDENCIES = [\n    'cypress',\n    'cypress-image-snapshot',\n    'cypress-match-screenshot'\n];\n/**\n * @type {task[]}\n * @see https://www.cypress.io/\n */\nexport const addCypress = [\n    {\n        text: 'Create Cypress config file',\n        task: async ({port}) => {\n            const Editor = createJsonEditor('cypress.json', {\n                baseUrl: `http://localhost:${port}`,\n                video: false\n            });\n            await (new Editor())\n                .create()\n                .commit();\n        },\n        condition: () => allDoNotExist('cypress.json')\n    },\n    {\n        text: 'Add Cypress test tasks to package.json',\n        task: async () => {\n            const scripts = {\n                'cy:open': 'cypress open',\n                'cy:run': 'cypress run',\n                'cy:update': 'npm run cy:run -- --env updateSnapshots=true',\n                'test:visual': 'npm-run-all --parallel start cy:open',\n                'test:visual:update': 'del-cli ./cypress/snapshots',\n                'test:visual:ci': 'npm-run-all --parallel start cy:run'\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Add Cypress global variable to .eslintrc.js',\n        task: async () => {\n            const globals = {cy: true};\n            await (new EslintConfigModuleEditor())\n                .extend({globals})\n                .commit();\n        },\n        condition: () => allDoExist('.eslintrc.js')\n    },\n    {\n        text: 'Copy Cypress files',\n        task: async ({overwrite}) => {\n            await (new Scaffolder(join(__dirname, 'templates')))\n                .overwrite(overwrite)\n                .target('cypress/plugins')\n                .copy('plugins/index.js', 'index.js')\n                .target('cypress/support')\n                .copy('support/index.js', 'index.js')\n                .copy('support/commands.js', 'commands.js')\n                .target('cypress/integration')\n                .copy('visual-regression.test.js')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Install Cypress dependencies',\n        task: ({skipInstall}) => install([...CYPRESS_DEPENDENCIES, 'npm-run-all', 'del-cli'], {dev: true, skipInstall}),\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    }\n];\nexport const removeCypress = [\n    {\n        text: 'Delete Cypress config file',\n        task: async () => {\n            const Editor = createJsonEditor('cypress.json');\n            await (new Editor())\n                .delete()\n                .commit();\n        },\n        condition: () => allDoExist('cypress.json')\n    },\n    {\n        text: 'Remove Cypress test tasks from package.json',\n        task: async () => {\n            const scripts = {\n                'cy:open': undefined,\n                'cy:run': undefined,\n                'cy:update': undefined,\n                'test:visual': undefined,\n                'test:visual:update': undefined,\n                'test:visual:ci': undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Remove Cypress global variable from .eslintrc.js',\n        task: async () => {\n            const globals = {cy: false};\n            await (new EslintConfigModuleEditor())\n                .extend({globals})\n                .commit();\n        },\n        condition: () => allDoExist('.eslintrc.js')\n    },\n    {\n        text: 'Uninstall Cypress dependencies',\n        task: () => uninstall(CYPRESS_DEPENDENCIES),\n        condition: ({skipInstall}) => !skipInstall && allDoExist('package.json') && (new PackageJsonEditor()).hasAll(...CYPRESS_DEPENDENCIES),\n        optional: ({skipInstall}) => !skipInstall\n    }\n];\nexport default addCypress;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-cypress/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "ALWAYS",
    "memberof": "src/commands/add-cypress/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-cypress/index.js~ALWAYS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-cypress/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "CYPRESS_DEPENDENCIES",
    "memberof": "src/commands/add-cypress/index.js",
    "static": true,
    "longname": "src/commands/add-cypress/index.js~CYPRESS_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-cypress/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "addCypress",
    "memberof": "src/commands/add-cypress/index.js",
    "static": true,
    "longname": "src/commands/add-cypress/index.js~addCypress",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-cypress/index.js",
    "importStyle": "{addCypress}",
    "description": "",
    "see": [
      "https://www.cypress.io/"
    ],
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "removeCypress",
    "memberof": "src/commands/add-cypress/index.js",
    "static": true,
    "longname": "src/commands/add-cypress/index.js~removeCypress",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-cypress/index.js",
    "importStyle": "{removeCypress}",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/commands/add-cypress/templates/plugins/index.js",
    "content": "const {addMatchImageSnapshotPlugin} = require('cypress-image-snapshot/plugin');\n\nmodule.exports = (on, config) => {\n    addMatchImageSnapshotPlugin(on, config);\n};",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-cypress/templates/plugins/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "addMatchImageSnapshotPlugin",
    "memberof": "src/commands/add-cypress/templates/plugins/index.js",
    "static": true,
    "longname": "src/commands/add-cypress/templates/plugins/index.js~addMatchImageSnapshotPlugin",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-cypress/templates/plugins/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/commands/add-cypress/templates/support/commands.js",
    "content": "import {addMatchImageSnapshotCommand} from 'cypress-image-snapshot/command';\n\naddMatchImageSnapshotCommand({\n    failureThreshold: 0.00,\n    failureThresholdType: 'percent',\n    customDiffConfig: {threshold: 0.0},\n    capture: 'viewport'\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-cypress/templates/support/commands.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "src/commands/add-cypress/templates/support/index.js",
    "content": "import './commands';",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-cypress/templates/support/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/commands/add-cypress/templates/visual-regression.test.js",
    "content": "/// <reference types=\"Cypress\" />\n\nconst LONG_ENOUGH = 5000;\n\ndescribe('Automated Visual Regression Tests', () => {\n    beforeEach(() => {\n        cy.visit('/');\n    });\n    it('Should match screenshot', () => {\n        const WIDTH = 1200;\n        const HEIGHT = 1000;\n        cy.viewport(WIDTH, HEIGHT);\n        cy.wait(LONG_ENOUGH);\n        cy.matchImageSnapshot('homepage');\n    });\n});\n",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-cypress/templates/visual-regression.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "LONG_ENOUGH",
    "memberof": "src/commands/add-cypress/templates/visual-regression.test.js",
    "static": true,
    "longname": "src/commands/add-cypress/templates/visual-regression.test.js~LONG_ENOUGH",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-cypress/templates/visual-regression.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/commands/add-electron/index.js",
    "content": "import {join} from 'path';\nimport {PackageJsonEditor, install} from '../../utils';\nimport {allDoExist} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\n\nconst DEPENDENCIES = [\n    'electron',\n    'electron-context-menu',\n    'electron-debug',\n    'electron-is-dev'\n];\nconst DEV_DEPENDENCIES = [\n    'electron-reloader',\n    'npm-run-all',\n    'spectron'\n];\nconst ALWAYS = () => true;\n/**\n * @type {task[]}\n * @see https://electronjs.org/\n */\nexport const tasks = [\n    {\n        text: 'Copy electron application files',\n        task: async ({overwrite}) => {\n            await (new Scaffolder(join(__dirname, 'templates')))\n                .overwrite(overwrite)\n                .target('.')\n                .copy('index.js')\n                .target('bin')\n                .copy('preload.js')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Configure metadata and add tasks to package.json',\n        task: async ({useParcel}) => {\n            const description = `Native Desktop application built with Electron`;\n            const main = 'index.js';\n            const name = 'tomo-native-app';\n            const scripts = {\n                'build:electron': 'npm-run-all build:es build:css',\n                'prestart:electron': 'npm run build:electron',\n                'start:electron': 'electron index --enable-logging',\n                dev: `npm-run-all --parallel watch:es${useParcel ? '' : ' watch:css'} start:electron`\n            };\n            await (new PackageJsonEditor())\n                .extend({description, main, name, scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Install electron dependencies',\n        task: async ({skipInstall}) => {\n            await install(DEPENDENCIES, {skipInstall});\n            await install(DEV_DEPENDENCIES, {dev: true, skipInstall});\n        },\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-electron/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "DEPENDENCIES",
    "memberof": "src/commands/add-electron/index.js",
    "static": true,
    "longname": "src/commands/add-electron/index.js~DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "DEV_DEPENDENCIES",
    "memberof": "src/commands/add-electron/index.js",
    "static": true,
    "longname": "src/commands/add-electron/index.js~DEV_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "ALWAYS",
    "memberof": "src/commands/add-electron/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-electron/index.js~ALWAYS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-electron/index.js",
    "static": true,
    "longname": "src/commands/add-electron/index.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-electron/index.js",
    "importStyle": "{tasks}",
    "description": "",
    "see": [
      "https://electronjs.org/"
    ],
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/commands/add-electron/templates/index.js",
    "content": "/* eslint-env node */\nconst {join} = require('path');\nconst {app, BrowserWindow, Menu} = require('electron');\nconst contextMenu = require('electron-context-menu');\n//\n// electron-reloaoder - https://github.com/sindresorhus/electron-reloader\n// main process file change --> app restart\n// renderer file change --> page reload\n//\ntry {require('electron-reloader')(module);} catch (err) {/* intentionally left blank */ }\n//\n// Add debug features like hotkeys for triggering dev tools and reload\n//\nrequire('electron-debug')();\n\nlet mainWindow;\nconst preload = join(__dirname, 'bin', 'preload.js');\nconst menuItems = [\n    {\n        label: 'Application',\n        submenu: [{\n            label: 'Quit',\n            accelerator: `${(process.platform === 'darwin') ? 'Command' : 'Control'}+Q`,\n            click: () => app.quit()\n        }]\n    },\n    {\n        label: 'Debug',\n        submenu: [{\n            label: 'Toggle DevTools',\n            click: () => mainWindow.toggleDevTools()\n        }]\n    }\n];\nconst applicationMenu = Menu.buildFromTemplate(menuItems);\nconst createWindow = () => {\n    mainWindow = new BrowserWindow({\n        width: 800,\n        height: 600,\n        webPreferences: {preload}\n    });\n    Menu.setApplicationMenu(applicationMenu);\n    contextMenu({prepend: () => menuItems});\n    mainWindow.loadURL(`file://${__dirname}/dist/index.html`);\n    //\n    // Open dev console\n    //\n    mainWindow.webContents.openDevTools();\n    mainWindow.on('closed', () => {\n        mainWindow = null;\n    });\n    mainWindow.webContents.on('devtools-opened', () => {\n        mainWindow.focus();\n        setImmediate(() => {\n            mainWindow.focus();\n        });\n    });\n};\napp.on('ready', createWindow);\napp.on('window-all-closed', () => {\n    //\n    // On OS X it is common for applications and their menu bar to stay active until the user quits explicitly with Cmd + Q\n    //\n    if (process.platform !== 'darwin') {\n        app.quit();\n    }\n});\napp.on('activate', () => {\n    //\n    // On OS X it's common to re-create a window in the app when the dock icon is clicked and there are no other windows open.\n    //\n    if (mainWindow === null) {\n        createWindow();\n    }\n});\n",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-electron/templates/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "join",
    "memberof": "src/commands/add-electron/templates/index.js",
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~join",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "app",
    "memberof": "src/commands/add-electron/templates/index.js",
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~app",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "contextMenu",
    "memberof": "src/commands/add-electron/templates/index.js",
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~contextMenu",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "preload",
    "memberof": "src/commands/add-electron/templates/index.js",
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~preload",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "menuItems",
    "memberof": "src/commands/add-electron/templates/index.js",
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~menuItems",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "applicationMenu",
    "memberof": "src/commands/add-electron/templates/index.js",
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~applicationMenu",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "createWindow",
    "memberof": "src/commands/add-electron/templates/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~createWindow",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/commands/add-electron/templates/preload.js",
    "content": "/* eslint-env browser, node */\nprocess.once('loaded', () => {\n    window.nodeRequire = require;\n    delete window.require;\n    delete window.exports;\n    delete window.module;\n    global.__devtron = {require, process};\n    if (process.env.NODE_ENV === 'test') {\n        global.electronRequire = require;\n    }\n});\n",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-electron/templates/preload.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/commands/add-esdoc.js",
    "content": "import {PackageJsonEditor, install} from '../utils';\nimport {allDoExist, allDoNotExist} from '../utils/common';\nimport createJsonEditor from '../utils/createJsonEditor';\n\nconst ESDOC_CONF = {\n    source: './src',\n    destination: './docs',\n    plugins: [\n        {\n            name: 'esdoc-standard-plugin'\n        },\n        {\n            name: 'esdoc-ecmascript-proposal-plugin',\n            option: {\n                all: true\n            }\n        }\n    ]\n};\nconst ESDOC_DEPENDENCIES = [\n    'esdoc',\n    'esdoc-jsx-plugin',\n    'esdoc-ecmascript-proposal-plugin',\n    'esdoc-standard-plugin'\n];\nconst ESDOC_REACT_PLUGINS = [\n    'esdoc-jsx-plugin'\n];\nconst EsdocJsonEditor = createJsonEditor('esdoc.conf.json', ESDOC_CONF);\n/**\n * @type {task[]}\n * @see https://esdoc.org/\n */\nexport const addEsdoc = [\n    {\n        text: 'Create esdoc configuration file',\n        task: async () => {\n            const cfg = new EsdocJsonEditor();\n            await cfg.create().commit();\n        },\n        condition: () => allDoNotExist('esdoc.conf.json', '.esdoc.json')\n    },\n    {\n        text: 'Add documentation tasks to package.json',\n        task: async () => {\n            const scripts = {\n                'lint:docs': `eslint . --no-eslintrc --rule valid-jsdoc:error --parser babel-eslint`,\n                predocs: 'npm run lint:docs',\n                docs: `esdoc -c esdoc.conf.json`,\n                postdocs: 'open-cli ./docs/index.html'\n            };\n            const pkg = new PackageJsonEditor();\n            await pkg.extend({scripts}).commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Install esdoc dependencies',\n        task: ({skipInstall}) => install([...ESDOC_DEPENDENCIES, 'open-cli'], {dev: true, skipInstall}),\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    },\n    {\n        text: 'Install esdoc React plugins',\n        task: ({skipInstall}) => install(ESDOC_REACT_PLUGINS, {dev: true, skipInstall}),\n        condition: ({isNotOffline, skipInstall, useReact}) => !skipInstall && isNotOffline && useReact && allDoExist('package.json'),\n        optional: ({useReact}) => useReact\n    },\n    {\n        text: 'Add esdoc React plugin to configuration file',\n        task: async () => {\n            const {plugins} = ESDOC_CONF;\n            const cfg = new EsdocJsonEditor();\n            await cfg\n                .extend({\n                    plugins: [...plugins, {\n                        name: 'esdoc-jsx-plugin',\n                        options: {enable: true}\n                    }]\n                })\n                .commit();\n        },\n        condition: ({useReact}) => useReact && allDoExist('esdoc.conf.json'),\n        optional: ({useReact}) => useReact\n    }\n];\nexport default addEsdoc;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-esdoc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "ESDOC_CONF",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~ESDOC_CONF",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"source\": string, \"destination\": string, \"plugins\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "ESDOC_DEPENDENCIES",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~ESDOC_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "ESDOC_REACT_PLUGINS",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~ESDOC_REACT_PLUGINS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "EsdocJsonEditor",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~EsdocJsonEditor",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "addEsdoc",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~addEsdoc",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": "{addEsdoc}",
    "description": "",
    "see": [
      "https://esdoc.org/"
    ],
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/commands/add-eslint/index.js",
    "content": "import {join} from 'path';\nimport merge from 'lodash.merge';\nimport {EslintConfigModuleEditor, PackageJsonEditor, install} from '../../utils';\nimport {allDoExist, allDoNotExist, allDoNotExistSync} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\n\nconst ESLINT_DEPENDENCIES = [\n    'eslint',\n    'babel-eslint',\n    'eslint-config-omaha-prime-grade',\n    'watch'\n];\nconst ESLINT_REACT_PLUGINS = [\n    'eslint-plugin-react'\n];\nconst ESLINT_SETTINGS = {\n    extends: [\n        `'omaha-prime-grade'`\n    ]\n};\nconst REACT_ESLINT_SETTINGS = merge({}, ESLINT_SETTINGS, {\n    parserOptions: {\n        ecmaFeatures: {\n            jsx: true\n        }\n    },\n    plugins: [`'jsx-a11y'`],\n    extends: [\n        `'omaha-prime-grade'`,\n        `'plugin:react/recommended'`,\n        `'plugin:jsx-a11y/recommended'`\n    ]\n});\n/**\n * @type {task[]}\n * @see https://eslint.org/\n */\nexport const tasks = [\n    {\n        text: 'Create ESLint configuration and .eslintignore files',\n        task: async ({overwrite}) => {\n            await (new EslintConfigModuleEditor())\n                .create()\n                .commit();\n            (allDoNotExistSync('.eslintignore') || overwrite) && await (new Scaffolder(join(__dirname, 'templates')))\n                .copy('.eslintignore')\n                .commit();\n        },\n        condition: ({overwrite}) => allDoNotExist('.eslintrc.js', '.eslintrc', '.eslintrc.json', '.eslintrc.yml') || overwrite\n    },\n    {\n        text: 'Add lint tasks to package.json',\n        task: async ({sourceDirectory}) => {\n            const scripts = {\n                lint: `eslint . -c ./.eslintrc.js --fix`,\n                'lint:ing': `watch 'npm run lint' ${sourceDirectory}`,\n                'lint:tests': 'eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore'\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Install ESLint dependencies',\n        task: ({skipInstall}) => install(ESLINT_DEPENDENCIES, {dev: true, skipInstall}),\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    },\n    {\n        text: 'Install ESLint React plugins',\n        task: ({skipInstall}) => install(ESLINT_REACT_PLUGINS, {dev: true, skipInstall}),\n        condition: ({isNotOffline, skipInstall, useReact}) => !skipInstall && isNotOffline && useReact && allDoExist('package.json'),\n        optional: ({useReact}) => useReact\n    },\n    {\n        text: 'Add lit-html support to ESLint configuration file',\n        task: async ({browser, skipInstall}) => {\n            const env = {browser};\n            const plugins = [`'lit'`];\n            await install(['eslint-plugin-lit'], {dev: true, skipInstall});\n            await (new EslintConfigModuleEditor())\n                .extend(merge({}, ESLINT_SETTINGS, {env, plugins}))\n                .extend({extends: [, `'plugin:lit/recommended'`]})\n                .commit();\n        },\n        condition: ({browser, isNotOffline, useReact}) => isNotOffline && browser && !useReact && allDoExist('package.json', '.eslintrc.js'),\n        optional: ({browser, useReact}) => browser && !useReact\n    },\n    {\n        text: 'Add React support to ESLint configuration file',\n        task: async ({browser, reactVersion, skipInstall}) => {\n            const env = {browser};\n            const settings = {\n                react: {\n                    version: `'${reactVersion}'`\n                }\n            };\n            await install(['eslint-plugin-jsx-a11y'], {dev: true, skipInstall});\n            await (new EslintConfigModuleEditor())\n                .extend(merge({}, REACT_ESLINT_SETTINGS, {env, settings}))\n                .commit();\n        },\n        condition: ({useReact}) => useReact && allDoExist('.eslintrc.js'),\n        optional: ({useReact}) => useReact\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-eslint/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "ESLINT_DEPENDENCIES",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~ESLINT_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "ESLINT_REACT_PLUGINS",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~ESLINT_REACT_PLUGINS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "ESLINT_SETTINGS",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~ESLINT_SETTINGS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"extends\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "REACT_ESLINT_SETTINGS",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~REACT_ESLINT_SETTINGS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": "{tasks}",
    "description": "",
    "see": [
      "https://eslint.org/"
    ],
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/commands/add-jest/index.js",
    "content": "import {join} from 'path';\nimport {PackageJsonEditor, install} from '../../utils';\nimport {allDoExist} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\n\nconst ALWAYS = () => true;\nconst JEST_DEPENDENCIES = [\n    'jest',\n    'jest-watch-typeahead',\n    'babel-jest'\n];\n/**\n * @type {task[]}\n * @see https://jestjs.io/\n */\nexport const addJest = [\n    {\n        text: 'Add test tasks and Jest configuration to package.json',\n        task: async ({browser}) => {\n            const scripts = {\n                test: 'jest .*.test.js --coverage',\n                'test:ing': 'npm test -- --watchAll'\n            };\n            const jest = {\n                testMatch: ['**/__tests__/**/*.(e2e|test).[jt]s?(x)'],\n                setupFilesAfterEnv: browser ? ['<rootDir>/__tests__/setup.js'] : undefined,\n                watchPlugins: ['jest-watch-typeahead/filename', 'jest-watch-typeahead/testname']\n            };\n            await (new PackageJsonEditor())\n                .extend({jest, scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Copy Jest boilerplate',\n        task: async ({browser}) => {\n            const scaffolder = new Scaffolder(join(__dirname, 'templates'));\n            browser && await scaffolder\n                .target('__tests__')\n                .copy('setup.js');\n            await scaffolder\n                .target('__tests__')\n                .copy('example.test.js')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Install Jest dependencies',\n        task: ({skipInstall}) => install(JEST_DEPENDENCIES, {dev: true, skipInstall}),\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    }\n];\nexport default addJest;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-jest/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "ALWAYS",
    "memberof": "src/commands/add-jest/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-jest/index.js~ALWAYS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-jest/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "JEST_DEPENDENCIES",
    "memberof": "src/commands/add-jest/index.js",
    "static": true,
    "longname": "src/commands/add-jest/index.js~JEST_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-jest/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "addJest",
    "memberof": "src/commands/add-jest/index.js",
    "static": true,
    "longname": "src/commands/add-jest/index.js~addJest",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-jest/index.js",
    "importStyle": "{addJest}",
    "description": "",
    "see": [
      "https://jestjs.io/"
    ],
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/commands/add-jest/templates/example.test.js",
    "content": "const delay = duration => new Promise(resolve => {\n    setTimeout(resolve, duration);\n});\n\ndescribe('Example', () => {\n    test('can pass', () => {\n        expect(1).toEqual(1);\n        expect(1).not.toEqual(0);\n    });\n    test('can pass asynchronously', async () => {\n        await delay(100);\n        expect(1).toEqual(1);\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-jest/templates/example.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "delay",
    "memberof": "src/commands/add-jest/templates/example.test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-jest/templates/example.test.js~delay",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-jest/templates/example.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "duration",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/commands/add-jest/templates/setup.js",
    "content": "class LocalStorageMock {\n    constructor() {\n        this.store = {};\n    }\n    clear() {\n        this.store = {};\n    }\n    getItem(key) {\n        return this.store[key] || null;\n    }\n    setItem(key, value) {\n        this.store[key] = value.toString();\n    }\n    removeItem(key) {\n        delete this.store[key];\n    }\n}\nglobal.localStorage = new LocalStorageMock();\n",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-jest/templates/setup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "LocalStorageMock",
    "memberof": "src/commands/add-jest/templates/setup.js",
    "static": true,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-jest/templates/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "store",
    "memberof": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "static": false,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock#store",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "clear",
    "memberof": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock#clear",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "getItem",
    "memberof": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock#getItem",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "setItem",
    "memberof": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock#setItem",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "removeItem",
    "memberof": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock#removeItem",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/commands/add-makefile.js",
    "content": "import {\n    allDoExist,\n    allDoExistSync,\n    allDoNotExist\n} from '../utils/common';\nimport MakefileEditor from '../utils/MakefileEditor';\n/**\n * @type {task[]}\n * @see https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html#Simple-Makefile\n */\nexport const addMakefile = [\n    {\n        text: 'Create Makefile',\n        task: async () => {\n            await (new MakefileEditor())\n                .create()\n                .write('# Makefile built with tomo')\n                .commit();\n        },\n        condition: () => allDoNotExist('Makefile')\n    },\n    {\n        text: 'Import tasks from package.json scripts',\n        task: async () => {\n            await (new MakefileEditor())\n                .delete()\n                .create()\n                .importScripts()\n                .appendScripts()\n                .appendHelpTask()\n                .commit();\n        },\n        condition: () => allDoExist('Makefile', 'package.json'),\n        optional: () => allDoExistSync('Makefile', 'package.json')\n    }\n];\nexport default addMakefile;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-makefile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "addMakefile",
    "memberof": "src/commands/add-makefile.js",
    "static": true,
    "longname": "src/commands/add-makefile.js~addMakefile",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-makefile.js",
    "importStyle": "{addMakefile}",
    "description": "",
    "see": [
      "https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html#Simple-Makefile"
    ],
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/commands/add-marionette/index.js",
    "content": "import {join} from 'path';\nimport {PackageJsonEditor, install} from '../../utils';\nimport {allDoExist} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\n\nconst MARIONETTE_DEPENDENCIES = [\n    'jquery',\n    'backbone',\n    'backbone.marionette',\n    'backbone.radio',\n    'marionette.approuter',\n    'lit-html',\n    'lodash-es',\n    'redux'\n];\nconst ALWAYS = async () => true;\n/**\n * @type {task[]}\n * @see https://marionettejs.com/\n */\nexport const tasks = [\n    {\n        text: 'Copy Marionette.js boilerplate and assets',\n        task: async ({assetsDirectory, overwrite, sourceDirectory, useParcel, usePika}) => {\n            const index = (useParcel || usePika) ? 'index-in-place.html' : 'index.html';\n            const fonts = useParcel ? 'fonts-in-place.css' : 'fonts.css';\n            await (new Scaffolder(join(__dirname, 'templates')))\n                .overwrite(overwrite)\n                .target(sourceDirectory)\n                .copy('main.js')\n                .target(`${sourceDirectory}/components`)\n                .copy('app.js')\n                .copy('header.js')\n                .copy('body.js')\n                .copy('footer.js')\n                .target(`${sourceDirectory}/shims`)\n                .copy('mn.renderer.shim.js')\n                .target(`${sourceDirectory}/plugins`)\n                .copy('mn.radio.logging.js')\n                .copy('mn.redux.state.js')\n                .commit();\n            await (new Scaffolder(join(__dirname, '..', 'common', 'templates')))\n                .overwrite(overwrite)\n                .target(`${assetsDirectory}`)\n                .copy(index, 'index.html')\n                .target(`${assetsDirectory}/css`)\n                .copy('style.css')\n                .copy(fonts, 'fonts.css')\n                .target(`${assetsDirectory}/images`)\n                .copy('blank_canvas.png')\n                .copy('preferences.png')\n                .target(`${assetsDirectory}/fonts`)\n                .copy('SansForgetica-Regular.eot')\n                .copy('SansForgetica-Regular.svg')\n                .copy('SansForgetica-Regular.ttf')\n                .copy('SansForgetica-Regular.woff')\n                .copy('SansForgetica-Regular.woff2')\n                .target(`${assetsDirectory}/library`)\n                .copy('.gitkeep')\n                .target(`${assetsDirectory}/workers`)\n                .copy('.gitkeep')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Set package.json \"main\" attribute',\n        task: async ({sourceDirectory}) => {\n            const main = `${sourceDirectory}/main.js`;\n            await (new PackageJsonEditor())\n                .extend({main})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Install Marionette.js dependencies',\n        task: ({skipInstall}) => install(MARIONETTE_DEPENDENCIES, {skipInstall}),\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-marionette/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "MARIONETTE_DEPENDENCIES",
    "memberof": "src/commands/add-marionette/index.js",
    "static": true,
    "longname": "src/commands/add-marionette/index.js~MARIONETTE_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-marionette/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "ALWAYS",
    "memberof": "src/commands/add-marionette/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/commands/add-marionette/index.js~ALWAYS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-marionette/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-marionette/index.js",
    "static": true,
    "longname": "src/commands/add-marionette/index.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-marionette/index.js",
    "importStyle": "{tasks}",
    "description": "",
    "see": [
      "https://marionettejs.com/"
    ],
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/commands/add-marionette/templates/body.js",
    "content": "import {html} from 'lit-html';\n\nexport default html`\n    <section>\n        <img src=\"assets/images/blank_canvas.png\" />\n        <p>What happens next is up to you...</p>\n    </section>\n`;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-marionette/templates/body.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/commands/add-marionette/templates/footer.js",
    "content": "import {html} from 'lit-html';\n\nconst links = {\n    tomo: 'https://github.com/jhwohlgemuth/tomo-cli',\n    ninalimpi: 'https://twitter.com/ninalimpi',\n    undraw: 'https://undraw.co/',\n    forgetica: 'https://www.sansforgetica.rmit/'\n};\n\nexport default ({name}) => html`\n    <footer>\n        <p>${name} was created with <span class=\"heart\">❤</span> using <a href=${links.tomo}>tomo</a></p>\n        <p>Illustration created by <a href=${links.ninalimpi}>Katerina Limpitsouni</a>, available at <a href=${links.undraw}>unDraw</a></p>\n        <p>Sans Forgetica font available for free from <a href=${links.forgetica}>RMIT University</a></p>\n    </footer>\n`;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-marionette/templates/footer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "links",
    "memberof": "src/commands/add-marionette/templates/footer.js",
    "static": true,
    "longname": "src/commands/add-marionette/templates/footer.js~links",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-marionette/templates/footer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"tomo\": string, \"ninalimpi\": string, \"undraw\": string, \"forgetica\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "footer",
    "memberof": "src/commands/add-marionette/templates/footer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-marionette/templates/footer.js~footer",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-marionette/templates/footer.js",
    "importStyle": "footer",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"name\": *}"
        ],
        "defaultRaw": {
          "name": null
        },
        "defaultValue": "{\"name\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/commands/add-marionette/templates/header.js",
    "content": "import {html} from 'lit-html';\n\nexport default ({name}) => html`\n    <header>\n        <p>${name}</p>\n    </header>\n`;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-marionette/templates/header.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "header",
    "memberof": "src/commands/add-marionette/templates/header.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-marionette/templates/header.js~header",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-marionette/templates/header.js",
    "importStyle": "header",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"name\": *}"
        ],
        "defaultRaw": {
          "name": null
        },
        "defaultValue": "{\"name\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/commands/add-parcel.js",
    "content": "import {PackageJsonEditor, PurgecssConfigEditor, install, uninstall} from '../utils';\nimport {allDoExist, allDoExistSync} from '../utils/common';\n\nconst DISABLED = () => false;\nconst DEPLOY_SCRIPTS = {\n    predeploy: 'npm-run-all clean build:es build:css copy:assets',\n    deploy: 'echo \\\"Not yet implemented - now.sh or surge.sh are supported out of the box\\\" && exit 1'\n};\nconst BUILD_DEPENDENCIES = [\n    'cpy-cli',\n    'del-cli',\n    'npm-run-all'\n];\nconst PARCEL_DEPENDENCIES = [\n    'parcel-bundler',\n    'parcel-plugin-purgecss'\n];\n/**\n * @type {task[]}\n * @see https://parceljs.org/\n */\nexport const addParcel = [\n    {\n        text: 'Add Parcel build tasks to package.json',\n        task: async ({assetsDirectory, outputDirectory, port, useReact}) => {\n            const alias = {\n                'react-dom': '@hot-loader/react-dom'\n            };\n            const scripts = {\n                ...DEPLOY_SCRIPTS,\n                clean: `del-cli ${outputDirectory}`,\n                copy: 'npm-run-all --parallel copy:assets copy:index',\n                'copy:assets': `cpy '${assetsDirectory}/!(css)/**/*.*' '${assetsDirectory}/**/[.]*' ${outputDirectory} --parents --recursive`,\n                'copy:index': `cpy '${assetsDirectory}/index.html' ${outputDirectory}`,\n                'prebuild:es': 'npm run clean',\n                'build:es': `parcel build --out-dir ${outputDirectory} --public-url ./ ${assetsDirectory}/index.html`,\n                'watch:assets': `watch 'npm run copy' ${assetsDirectory}`,\n                'prewatch:es': 'npm run clean',\n                'watch:es': `npm run build:es`,\n                serve: `parcel ${assetsDirectory}/index.html --out-dir ${outputDirectory} --port ${port} --open`,\n                start: 'npm-run-all --parallel watch:assets serve'\n            };\n            await (new PackageJsonEditor())\n                .extend(useReact ? {alias} : {})\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Configure dev task',\n        task: async ({skipInstall}) => {\n            const scripts = {\n                dev: 'stmux [ \\\"npm run watch:es\\\" : \\\"npm run lint:ing\\\" ]'\n            };\n            await install(['stmux'], {dev: true, skipInstall});\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json', '.eslintrc.js'),\n        optional: () => allDoExistSync('package.json', '.eslintrc.js')\n    },\n    {\n        text: 'Create PurgeCSS config file',\n        task: async ({assetsDirectory}) => {\n            const content = [`'${assetsDirectory}/index.html'`];\n            await (new PurgecssConfigEditor())\n                .create()\n                .extend({content})\n                .commit();\n        },\n        condition: DISABLED,\n        optional: DISABLED\n    },\n    {\n        text: 'Install Parcel development dependencies',\n        task: ({skipInstall}) => install([...BUILD_DEPENDENCIES, ...PARCEL_DEPENDENCIES], {dev: true, skipInstall}),\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    }\n];\nexport const removeParcel = [\n    {\n        text: 'Remove Parcel build tasks from package.json',\n        task: async () => {\n            const scripts = {\n                clean: undefined,\n                copy: undefined,\n                'copy:assets': undefined,\n                'copy:index': undefined,\n                'watch:assets': undefined,\n                dev: undefined,\n                'prebuild:es': undefined,\n                'build:es': undefined,\n                'prewatch:es': undefined,\n                'watch:es': undefined,\n                serve: undefined,\n                start: undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Delete PurgeCSS config file',\n        task: async () => {\n            await (new PurgecssConfigEditor())\n                .delete()\n                .commit();\n        },\n        condition: DISABLED,\n        optional: DISABLED\n    },\n    {\n        text: 'Uninstall Parcel dependencies',\n        task: () => uninstall([...BUILD_DEPENDENCIES, ...PARCEL_DEPENDENCIES, 'stmux']),\n        condition: ({skipInstall}) => !skipInstall && allDoExist('package.json') && (new PackageJsonEditor()).hasAll(...PARCEL_DEPENDENCIES),\n        optional: ({skipInstall}) => !skipInstall\n    }\n];\nexport default addParcel;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-parcel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "DISABLED",
    "memberof": "src/commands/add-parcel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-parcel.js~DISABLED",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-parcel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "DEPLOY_SCRIPTS",
    "memberof": "src/commands/add-parcel.js",
    "static": true,
    "longname": "src/commands/add-parcel.js~DEPLOY_SCRIPTS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-parcel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"predeploy\": string, \"deploy\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "BUILD_DEPENDENCIES",
    "memberof": "src/commands/add-parcel.js",
    "static": true,
    "longname": "src/commands/add-parcel.js~BUILD_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-parcel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "PARCEL_DEPENDENCIES",
    "memberof": "src/commands/add-parcel.js",
    "static": true,
    "longname": "src/commands/add-parcel.js~PARCEL_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-parcel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "addParcel",
    "memberof": "src/commands/add-parcel.js",
    "static": true,
    "longname": "src/commands/add-parcel.js~addParcel",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-parcel.js",
    "importStyle": "{addParcel}",
    "description": "",
    "see": [
      "https://parceljs.org/"
    ],
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "removeParcel",
    "memberof": "src/commands/add-parcel.js",
    "static": true,
    "longname": "src/commands/add-parcel.js~removeParcel",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-parcel.js",
    "importStyle": "{removeParcel}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "src/commands/add-postcss.js",
    "content": "import {\n    PackageJsonEditor,\n    PostcssConfigEditor,\n    install,\n    uninstall\n} from '../utils';\nimport {allDoExist, allDoNotExist} from '../utils/common';\n\nconst POSTCSS_DEPENDENCIES = [\n    'cssnano',\n    'postcss-cli',\n    'postcss-reporter',\n    'postcss-safe-parser',\n    'postcss-import',\n    'postcss-preset-env',\n    'stylelint',\n    'stylelint-config-recommended'\n];\n/**\n * @type {task[]}\n * @see https://github.com/postcss/postcss\n */\nexport const addPostcss = [\n    {\n        text: 'Create PostCSS config file',\n        task: async () => {\n            const plugins = [\n                `require('stylelint')({config: {extends: 'stylelint-config-recommended'}})`,\n                `require('postcss-import')()`,\n                `require('postcss-preset-env')({stage: 0})`,\n                `require('cssnano')()`,\n                `require('postcss-reporter')({clearReportedMessages: true})`\n            ];\n            await (new PostcssConfigEditor())\n                .create()\n                .extend({plugins})\n                .commit();\n        },\n        condition: () => allDoNotExist('postcss.config.js')\n    },\n    {\n        text: 'Add PostCSS tasks to package.json',\n        task: async ({assetsDirectory, outputDirectory}) => {\n            const scripts = {\n                'build:css': `postcss ${assetsDirectory}/css/style.css --dir ${outputDirectory}`,\n                'watch:css': 'npm run build:css -- --watch'\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Install PostCSS dependencies',\n        task: ({skipInstall}) => install(POSTCSS_DEPENDENCIES, {dev: true, skipInstall}),\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    }\n];\nexport const removePostcss = [\n    {\n        text: 'Delete PostCSS config file',\n        task: async () => {\n            await (new PostcssConfigEditor())\n                .delete()\n                .commit();\n        },\n        condition: () => allDoExist('postcss.config.js')\n    },\n    {\n        text: 'Remove PostCSS build task from package.json',\n        task: async () => {\n            const scripts = {\n                'build:css': undefined,\n                'watch:css': undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Uninstall PostCSS dependencies',\n        task: () => uninstall(POSTCSS_DEPENDENCIES),\n        condition: ({skipInstall}) => !skipInstall && allDoExist('package.json') && (new PackageJsonEditor()).hasAll(...POSTCSS_DEPENDENCIES),\n        optional: ({skipInstall}) => !skipInstall\n    }\n];\nexport default addPostcss;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-postcss.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "POSTCSS_DEPENDENCIES",
    "memberof": "src/commands/add-postcss.js",
    "static": true,
    "longname": "src/commands/add-postcss.js~POSTCSS_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-postcss.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "addPostcss",
    "memberof": "src/commands/add-postcss.js",
    "static": true,
    "longname": "src/commands/add-postcss.js~addPostcss",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-postcss.js",
    "importStyle": "{addPostcss}",
    "description": "",
    "see": [
      "https://github.com/postcss/postcss"
    ],
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "removePostcss",
    "memberof": "src/commands/add-postcss.js",
    "static": true,
    "longname": "src/commands/add-postcss.js~removePostcss",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-postcss.js",
    "importStyle": "{removePostcss}",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/commands/add-react/index.js",
    "content": "import {join} from 'path';\nimport {PackageJsonEditor, install} from '../../utils';\nimport {allDoExist} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\n\nconst REACT_DEPENDENCIES = [\n    'prop-types',\n    'react',\n    'react-dom',\n    'wouter', // https://github.com/molefrog/wouter\n    '@hot-loader/react-dom'\n];\nconst DEV_DEPENDENCIES = [\n    'npm-run-all'\n];\nconst ALWAYS = () => true;\n/**\n * @type {task[]}\n * @see https://reactjs.org/\n */\nexport const addReact = [\n    {\n        text: 'Copy React boilerplate and assets',\n        task: async ({assetsDirectory, sourceDirectory, overwrite, useParcel}) => {\n            const index = useParcel ? 'index-in-place-react.html' : 'index-react.html';\n            const fonts = useParcel ? 'fonts-in-place.css' : 'fonts.css';\n            await (new Scaffolder(join(__dirname, 'templates')))\n                .overwrite(overwrite)\n                .target(sourceDirectory)\n                .copy('main.js')\n                .target(`${sourceDirectory}/components`)\n                .copy('App.js')\n                .copy('Header.js')\n                .copy('Body.js')\n                .copy('Footer.js')\n                .commit();\n            await (new Scaffolder(join(__dirname, '..', 'common', 'templates')))\n                .overwrite(overwrite)\n                .target(`${assetsDirectory}`)\n                .copy(index, 'index.html')\n                .target(`${assetsDirectory}/css`)\n                .copy('style.css')\n                .copy(fonts, 'fonts.css')\n                .target(`${assetsDirectory}/images`)\n                .copy('react.png')\n                .copy('preferences.png')\n                .target(`${assetsDirectory}/fonts`)\n                .copy('SansForgetica-Regular.eot')\n                .copy('SansForgetica-Regular.svg')\n                .copy('SansForgetica-Regular.ttf')\n                .copy('SansForgetica-Regular.woff')\n                .copy('SansForgetica-Regular.woff2')\n                .target(`${assetsDirectory}/library`)\n                .copy('.gitkeep')\n                .target(`${assetsDirectory}/workers`)\n                .copy('.gitkeep')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Set package.json \"main\" attribute and add scripts tasks',\n        task: async ({sourceDirectory, useParcel, useRollup}) => {\n            const main = `${sourceDirectory}/main.js`;\n            const scripts = {\n                'watch:es': useRollup ? `watch 'npm run build:es' ${sourceDirectory}` : 'webpack-dev-server --hot --open --mode development',\n                start: 'npm-run-all build:es --parallel watch:*'\n            };\n            await (new PackageJsonEditor())\n                .extend({main})\n                .extend(useParcel ? {} : {scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Install React dependencies',\n        task: ({skipInstall}) => install([...REACT_DEPENDENCIES, ...DEV_DEPENDENCIES], {skipInstall}),\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    }\n];\nexport default addReact;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-react/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "REACT_DEPENDENCIES",
    "memberof": "src/commands/add-react/index.js",
    "static": true,
    "longname": "src/commands/add-react/index.js~REACT_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-react/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "DEV_DEPENDENCIES",
    "memberof": "src/commands/add-react/index.js",
    "static": true,
    "longname": "src/commands/add-react/index.js~DEV_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-react/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "ALWAYS",
    "memberof": "src/commands/add-react/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-react/index.js~ALWAYS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-react/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "addReact",
    "memberof": "src/commands/add-react/index.js",
    "static": true,
    "longname": "src/commands/add-react/index.js~addReact",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-react/index.js",
    "importStyle": "{addReact}",
    "description": "",
    "see": [
      "https://reactjs.org/"
    ],
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "src/commands/add-react/templates/App.js",
    "content": "import React, {Fragment} from 'react';\nimport {hot} from 'react-hot-loader';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\nimport Body from './Body';\nimport Footer from './Footer';\n\nconst App = ({name}) => <Fragment>\n    <Header></Header>\n    <Body></Body>\n    <Footer name={name}></Footer>\n</Fragment>;\n\nApp.propTypes = {\n    name: PropTypes.string\n};\n\nexport default hot(module)(App);",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-react/templates/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "App",
    "memberof": "src/commands/add-react/templates/App.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-react/templates/App.js~App",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-react/templates/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"name\": *}"
        ],
        "defaultRaw": {
          "name": null
        },
        "defaultValue": "{\"name\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "src/commands/add-react/templates/Body.js",
    "content": "import React from 'react';\n\nconst Body = () => <section>\n    <img src={'assets/images/react.png'} />\n    <p>What happens next is up to you...</p>\n</section>;\n\nexport default Body;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-react/templates/Body.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "Body",
    "memberof": "src/commands/add-react/templates/Body.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-react/templates/Body.js~Body",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-react/templates/Body.js",
    "importStyle": "Body",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/commands/add-react/templates/Footer.js",
    "content": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst links = {\n    tomo: 'https://github.com/jhwohlgemuth/tomo-cli',\n    ninalimpi: 'https://twitter.com/ninalimpi',\n    undraw: 'https://undraw.co/',\n    forgetica: 'https://www.sansforgetica.rmit/'\n};\n\nconst Footer = ({name}) => <footer>\n    <p>{name} was created with <span className=\"heart\">❤</span> using <a href={links.tomo}>tomo</a></p>\n    <p>Illustration created by <a href={links.ninalimpi}>Katerina Limpitsouni</a>, available at <a href={links.undraw}>unDraw</a></p>\n    <p>Sans Forgetica font available for free from <a href={links.forgetica}>RMIT University</a></p>\n</footer>;\n\nFooter.propTypes = {\n    name: PropTypes.string\n};\n\nexport default Footer;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-react/templates/Footer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "links",
    "memberof": "src/commands/add-react/templates/Footer.js",
    "static": true,
    "longname": "src/commands/add-react/templates/Footer.js~links",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-react/templates/Footer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"tomo\": string, \"ninalimpi\": string, \"undraw\": string, \"forgetica\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "Footer",
    "memberof": "src/commands/add-react/templates/Footer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-react/templates/Footer.js~Footer",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-react/templates/Footer.js",
    "importStyle": "Footer",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"name\": *}"
        ],
        "defaultRaw": {
          "name": null
        },
        "defaultValue": "{\"name\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/commands/add-react/templates/Header.js",
    "content": "import React, {useState, useEffect} from 'react';\n\nconst Header = () => {\n    const [count, setCount] = useState(0);\n    useEffect(() => {\n        const counter = setInterval(() => setCount(count + 1), 1000);// eslint-disable-line no-magic-numbers\n        return () => clearInterval(counter);\n    });\n    return <header>\n        <p>HMR Check</p>\n        <p>Count: {count}</p>\n    </header>;\n};\n\nexport default Header;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-react/templates/Header.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "Header",
    "memberof": "src/commands/add-react/templates/Header.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-react/templates/Header.js~Header",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-react/templates/Header.js",
    "importStyle": "Header",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "src/commands/add-react/templates/main.js",
    "content": "/**\n * Main entry point for application\n */\nimport React from 'react';\nimport {render} from 'react-dom';\nimport App from './components/App';\n\nconst name = 'My tomo application';\nconst root = document.getElementById('root');\n\nrender(<App name={name} />, root);\n\nif (module.hot) {\n    module.hot.accept(() => {\n        render(<App name={name} />, root);\n    });\n}",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-react/templates/main.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "name",
    "memberof": "src/commands/add-react/templates/main.js",
    "static": true,
    "longname": "src/commands/add-react/templates/main.js~name",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-react/templates/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "root",
    "memberof": "src/commands/add-react/templates/main.js",
    "static": true,
    "longname": "src/commands/add-react/templates/main.js~root",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-react/templates/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/commands/add-reason/index.js",
    "content": "import {join} from 'path';\nimport {BsConfigJsonEditor, PackageJsonEditor, install, uninstall} from '../../utils';\nimport {allDoExist, allDoNotExist} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\n\nconst DEPENDENCIES = [\n    'reason-react'\n];\nconst DEV_DEPENDENCIES = [\n    'bs-platform'\n];\n/**\n * @type {task[]}\n * @see https://reasonml.github.io/reason-react/en/\n */\nexport const addReason = [\n    {\n        text: 'Create bsconfig.json file',\n        task: async () => {\n            const {name} = (new PackageJsonEditor()).read();\n            await (new BsConfigJsonEditor())\n                .create()\n                .extend({name})\n                .commit();\n        },\n        condition: () => allDoNotExist('bsconfig.json')\n    },\n    {\n        text: 'Add Reason scripts to package.json',\n        task: async () => {\n            const scripts = {\n                'build:reason': 'bsb -make-world -clean-world',\n                'watch:reason': 'npm run build:reason -- -w'\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Copy ReasonReact boilerplate files',\n        task: async ({overwrite, sourceDirectory}) => {\n            await (new Scaffolder(join(__dirname, 'templates')))\n                .overwrite(overwrite)\n                .target(`${sourceDirectory}/components`)\n                .copy('App.re')\n                .copy('Example.re')\n                .commit();\n        },\n        condition: ({useReact}) => useReact,\n        optional: ({useReact}) => useReact\n    },\n    {\n        text: 'Install ReasonReact dependencies',\n        task: async ({skipInstall}) => {\n            await install(DEPENDENCIES, {skipInstall});\n            await install(DEV_DEPENDENCIES, {dev: true, skipInstall});\n        },\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    }\n];\nexport const removeReason = [\n    {\n        text: 'Delete bsconfig.json file',\n        task: async () => {\n            await (new BsConfigJsonEditor())\n                .delete()\n                .commit();\n        },\n        condition: () => allDoExist('bsconfig.json')\n    },\n    {\n        text: 'Remove Reason scripts from package.json',\n        task: async () => {\n            const scripts = {\n                'build:reason': undefined,\n                'watch:reason': undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Uninstall Reason dependencies',\n        task: () => uninstall([...DEPENDENCIES, ...DEV_DEPENDENCIES]),\n        condition: ({skipInstall}) => !skipInstall && allDoExist('package.json') && (new PackageJsonEditor()).hasAll(...DEPENDENCIES, ...DEV_DEPENDENCIES) // eslint-disable-line max-len\n    }\n];\nexport default addReason;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-reason/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "DEPENDENCIES",
    "memberof": "src/commands/add-reason/index.js",
    "static": true,
    "longname": "src/commands/add-reason/index.js~DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-reason/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "DEV_DEPENDENCIES",
    "memberof": "src/commands/add-reason/index.js",
    "static": true,
    "longname": "src/commands/add-reason/index.js~DEV_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-reason/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "addReason",
    "memberof": "src/commands/add-reason/index.js",
    "static": true,
    "longname": "src/commands/add-reason/index.js~addReason",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-reason/index.js",
    "importStyle": "{addReason}",
    "description": "",
    "see": [
      "https://reasonml.github.io/reason-react/en/"
    ],
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "removeReason",
    "memberof": "src/commands/add-reason/index.js",
    "static": true,
    "longname": "src/commands/add-reason/index.js~removeReason",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-reason/index.js",
    "importStyle": "{removeReason}",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/commands/add-rollup.js",
    "content": "import {join} from 'path';\nimport {PackageJsonEditor, RollupConfigEditor, install, uninstall} from '../utils';\nimport {allDoExist, allDoExistSync, allDoNotExist} from '../utils/common';\n\nconst DEPLOY_SCRIPTS = {\n    predeploy: 'npm-run-all clean build:es build:css copy:assets',\n    deploy: 'echo \\\"Not yet implemented - now.sh or surge.sh are supported out of the box\\\" && exit 1'\n};\nconst BUILD_DEPENDENCIES = [\n    'cpy-cli',\n    'del-cli',\n    'npm-run-all'\n];\nconst ROLLUP_DEPENDENCIES = [\n    'rollup',\n    'rollup-plugin-babel',\n    'rollup-plugin-commonjs',\n    'rollup-plugin-node-resolve',\n    'rollup-plugin-replace',\n    'rollup-plugin-terser'\n];\n/**\n * @type {task[]}\n * @see https://rollupjs.org/guide/en/\n */\nexport const addRollup = [\n    {\n        text: 'Create Rollup configuration file',\n        task: async ({outputDirectory, sourceDirectory, useReact}) => {\n            const input =  `'${sourceDirectory}/main.js'`;\n            const output = {\n                file: `'${outputDirectory}/bundle.min.js'`\n            };\n            const plugins = [, `commonjs()`];\n            await (new RollupConfigEditor())\n                .create()\n                .prepend(`import {terser} from 'rollup-plugin-terser';`)\n                .prepend(`import replace from 'rollup-plugin-replace';`)\n                .prepend(`import resolve from 'rollup-plugin-node-resolve';`)\n                .prepend(`import commonjs from 'rollup-plugin-commonjs';`)\n                .prepend(`import babel from 'rollup-plugin-babel';`)\n                .prepend(`/* eslint-disable max-len */`)\n                .extend({input, output})\n                .extend(useReact ? {plugins} : {})\n                .commit();\n        },\n        condition: () => allDoNotExist('webpack.config.js')\n    },\n    {\n        text: 'Add Rollup build tasks to package.json',\n        task: async ({assetsDirectory, outputDirectory, sourceDirectory}) => {\n            const scripts = {\n                ...DEPLOY_SCRIPTS,\n                clean: `del-cli ${outputDirectory}`,\n                copy: 'npm-run-all --parallel copy:assets copy:index',\n                'copy:assets': `cpy '${assetsDirectory}/!(css)/**/*.*' '${assetsDirectory}/**/[.]*' ${outputDirectory} --parents --recursive`,\n                'copy:index': `cpy '${assetsDirectory}/index.html' ${outputDirectory}`,\n                'prebuild:es': `del-cli ${join(outputDirectory, assetsDirectory)}`,\n                'build:es': 'rollup -c',\n                'postbuild:es': 'npm run copy',\n                'watch:assets': `watch 'npm run copy' ${assetsDirectory}`,\n                'watch:es': `watch 'npm run build:es' ${sourceDirectory}`\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Configure dev task',\n        task: async ({skipInstall}) => {\n            const scripts = {\n                dev: 'stmux [ \\\"npm run watch:es\\\" : \\\"npm run lint:ing\\\" ]'\n            };\n            await install(['stmux'], {dev: true, skipInstall});\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json', '.eslintrc.js'),\n        optional: () => allDoExistSync('package.json', '.eslintrc.js')\n    },\n    {\n        text: 'Install Rollup dependencies',\n        task: ({skipInstall}) => install([...BUILD_DEPENDENCIES, ...ROLLUP_DEPENDENCIES], {dev: true, skipInstall}),\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    }\n];\nexport const removeRollup = [\n    {\n        text: 'Delete Rollup configuration file',\n        task: async () => {\n            await (new RollupConfigEditor())\n                .delete()\n                .commit();\n        },\n        condition: () => allDoExist('rollup.config.js')\n    },\n    {\n        text: 'Remove Rollup build tasks from package.json',\n        task: async () => {\n            const scripts = {\n                copy: undefined,\n                'copy:assets': undefined,\n                'copy:index': undefined,\n                'watch:assets': undefined,\n                dev: undefined,\n                'prebuild:es': undefined,\n                'build:es': undefined,\n                'postbuild:es': undefined,\n                'watch:es': undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Uninstall Rollup dependencies',\n        task: () => uninstall([...BUILD_DEPENDENCIES, ...ROLLUP_DEPENDENCIES, 'stmux']),\n        condition: ({skipInstall}) => !skipInstall && allDoExist('package.json') && (new PackageJsonEditor()).hasAll(...ROLLUP_DEPENDENCIES),\n        optional: ({skipInstall}) => !skipInstall\n    }\n];\nexport default addRollup;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-rollup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "DEPLOY_SCRIPTS",
    "memberof": "src/commands/add-rollup.js",
    "static": true,
    "longname": "src/commands/add-rollup.js~DEPLOY_SCRIPTS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-rollup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"predeploy\": string, \"deploy\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "BUILD_DEPENDENCIES",
    "memberof": "src/commands/add-rollup.js",
    "static": true,
    "longname": "src/commands/add-rollup.js~BUILD_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-rollup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "ROLLUP_DEPENDENCIES",
    "memberof": "src/commands/add-rollup.js",
    "static": true,
    "longname": "src/commands/add-rollup.js~ROLLUP_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-rollup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "addRollup",
    "memberof": "src/commands/add-rollup.js",
    "static": true,
    "longname": "src/commands/add-rollup.js~addRollup",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-rollup.js",
    "importStyle": "{addRollup}",
    "description": "",
    "see": [
      "https://rollupjs.org/guide/en/"
    ],
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "removeRollup",
    "memberof": "src/commands/add-rollup.js",
    "static": true,
    "longname": "src/commands/add-rollup.js~removeRollup",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-rollup.js",
    "importStyle": "{removeRollup}",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "src/commands/add-rust.js",
    "content": "/* eslint-disable max-len */\nimport {arrowRight} from 'figures';\nimport {PackageJsonEditor} from '../utils';\nimport {allDoExist} from '../utils/common';\n/**\n * @type {task[]}\n * @see https://webpack.js.org/\n */\nexport const rustTasks = [\n    {\n        text: `Add Rust ${arrowRight} WASM build tasks to package.json`,\n        task: async ({assetsDirectory}) => {\n            const scripts = {\n                'build:wasm': `rustc +nightly --target wasm32-unknown-unknown -O --crate-type=cdylib ${assetsDirectory}/rust/main.rs -o ./${assetsDirectory}/rust/main.wasm`,\n                'postbuild:wasm': `wasm-gc ${assetsDirectory}/rust/main.wasm ${assetsDirectory}/rust/main.min.wasm`\n            };\n            const pkg = new PackageJsonEditor();\n            await pkg.extend({scripts}).commit();\n        },\n        condition: () => allDoExist('package.json')\n    }\n];\nexport default rustTasks;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-rust.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "rustTasks",
    "memberof": "src/commands/add-rust.js",
    "static": true,
    "longname": "src/commands/add-rust.js~rustTasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-rust.js",
    "importStyle": "{rustTasks}",
    "description": "",
    "see": [
      "https://webpack.js.org/"
    ],
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "src/commands/add-webpack.js",
    "content": "import {join} from 'path';\nimport {oneLineTrim} from 'common-tags';\nimport {PackageJsonEditor, WebpackConfigEditor, install, uninstall} from '../utils';\nimport {allDoExist, allDoExistSync, allDoNotExist} from '../utils/common';\n\nconst DEPLOY_SCRIPTS = {\n    predeploy: 'npm-run-all clean \"build:es -- --mode=production\" build:css',\n    deploy: 'echo \\\"Not yet implemented - now.sh or surge.sh are supported out of the box\\\" && exit 1'\n};\nconst BUILD_DEPENDENCIES = [\n    'cpy-cli',\n    'del-cli',\n    'npm-run-all'\n];\nconst WEBPACK_DEPENDENCIES = [\n    'webpack',\n    'webpack-cli',\n    'webpack-dashboard',\n    'webpack-jarvis',\n    'webpack-dev-server',\n    'babel-loader',\n    'terser-webpack-plugin'\n];\nconst WEBPACK_WITH_CESIUM_DEPENDENCIES = [\n    'copy-webpack-plugin',\n    'css-loader',\n    'style-loader',\n    'url-loader'\n];\nconst WEBPACK_RULES = [\n    {\n        test: `/\\.jsx?$/`,\n        exclude: `/node_modules/`,\n        loader: `'babel-loader'`,\n        query: {\n            presets: [`'@babel/env'`]\n        }\n    }\n];\nconst WEBPACK_RULES_WITH_CESIUM = [\n    ...WEBPACK_RULES,\n    {\n        test: `/\\.css$/`,\n        use: [`'style-loader'`, `'css-loader'`]\n    },\n    {\n        test: `/\\.(png|gif|jpg|jpeg|svg|xml|json)$/`,\n        use: [`'url-loader'`]\n    }\n];\nconst WEBPACK_PLUGINS = [\n    `new DashboardPlugin()`\n];\nconst WEBPACK_PLUGINS_WITH_CESIUM = [\n    ...WEBPACK_PLUGINS,\n    `new DefinePlugin({CESIUM_BASE_URL: JSON.stringify('/')})`,\n    oneLineTrim`new CopyWebpackPlugin([\n        {\n            from: join(source, workers),\n            to: 'Workers'\n        },\n        {\n            from: join(source, 'Assets'),\n            to: 'Assets'\n        },\n        {\n            from: join(source, 'Widgets'),\n            to: 'Widgets'\n        }\n    ])`\n];\nconst CESIUM_DEPENDENCIES = [\n    ...WEBPACK_WITH_CESIUM_DEPENDENCIES,\n    'cesium'\n];\nconst RESIUM_DEPENDENCIES = [\n    ...CESIUM_DEPENDENCIES,\n    'resium'\n];\nconst getAliasOption = (useReact = false, withCesium = false) => {\n    const CESIUM_ALIASES = {\n        cesium$: `'cesium/Cesium'`,\n        cesium: `'cesium/Source'`\n    };\n    return {\n        ...(useReact ? {'\\'react-dom\\'': `'@hot-loader/react-dom'`} : {}),\n        ...(withCesium ? CESIUM_ALIASES : {})\n    };\n};\nconst getDevServerOption = (outputDirectory, port) => ({\n    port,\n    contentBase: `'${outputDirectory}'`,\n    compress: true,\n    watchContentBase: true\n});\nconst getEntryOption = (sourceDirectory, useReact = false) => {\n    const entryWithReact = [\n        `...(argv.mode === 'production' ? [] : ['react-hot-loader/patch'])`,\n        `'${sourceDirectory}/main.js'`\n    ];\n    const entryWithoutReact = {\n        app: `'${sourceDirectory}/main.js'`\n    };\n    return useReact ? entryWithReact : entryWithoutReact;\n};\nconst getResolveOption = (sourceDirectory, alias = {}, useReact = false) => ({\n    modules: `[resolve(__dirname, '${sourceDirectory}'), 'node_modules']`,\n    extensions: `[${useReact ? `'.js', '.jsx'` : `'.js'`}]`,\n    alias\n});\n/*eslint-disable complexity*/\nconst getWebpackConfigPrependContent = withCesium => [\n    `/* eslint-env node */`,\n    `const {${withCesium ? 'join, ' : ''}resolve} = require('path');`,\n    withCesium && `const {DefinePlugin} = require('webpack');`,\n    withCesium && `const CopyWebpackPlugin = require('copy-webpack-plugin');`,\n    `const DashboardPlugin = require('webpack-dashboard/plugin');`,\n    `const TerserPlugin = require('terser-webpack-plugin');`,\n    withCesium && `const source = 'node_modules/cesium/Source';`,\n    withCesium && `const workers = '../Build/Cesium/Workers';`\n]\n    .reverse()// prepend puts last on top\n    .filter(val => typeof val === 'string');\n/*eslint-enable complexity*/\n/**\n * @type {task[]}\n * @see https://webpack.js.org/\n */\nexport const addWebpack = [\n    {\n        text: 'Create Webpack configuration file',\n        task: async ({outputDirectory, port, sourceDirectory, useReact, withCesium}) => {\n            const alias = getAliasOption(useReact, withCesium);\n            const amd = {toUrlUndefined: true};\n            const devServer = getDevServerOption(outputDirectory, port);\n            const entry = getEntryOption(sourceDirectory, useReact);\n            const node = {fs: `'empty'`};\n            const optimization = {minimize: `argv.mode === 'production'`, minimizer: `[new TerserPlugin()]`};\n            const plugins = withCesium ? WEBPACK_PLUGINS_WITH_CESIUM : WEBPACK_PLUGINS;\n            const resolve = getResolveOption(sourceDirectory, alias, useReact);\n            const rules = withCesium ? WEBPACK_RULES_WITH_CESIUM : WEBPACK_RULES;\n            await getWebpackConfigPrependContent(withCesium)\n                .reduce((config, content) => config.prepend(content), (new WebpackConfigEditor()).create())\n                .extend({devServer, entry, module: {rules}, optimization, plugins, resolve})\n                .extend(withCesium ? {amd, node} : {})\n                .commit();\n        },\n        condition: () => allDoNotExist('webpack.config.js')\n    },\n    {\n        text: 'Add Webpack build tasks to package.json',\n        task: async ({assetsDirectory, outputDirectory, sourceDirectory}) => {\n            const scripts = {\n                ...DEPLOY_SCRIPTS,\n                clean: `del-cli ${outputDirectory}`,\n                copy: 'npm-run-all --parallel copy:assets copy:index',\n                'copy:assets': `cpy '${assetsDirectory}/!(css)/**/*.*' '${assetsDirectory}/**/[.]*' ${outputDirectory} --parents --recursive`,\n                'copy:index': `cpy '${assetsDirectory}/index.html' ${outputDirectory}`,\n                'prebuild:es': `del-cli ${join(outputDirectory, assetsDirectory)}`,\n                'build:es': 'webpack',\n                'postbuild:es': 'npm run copy',\n                'watch:assets': `watch 'npm run copy' ${assetsDirectory}`,\n                'watch:es': `watch 'npm run build:es' ${sourceDirectory}`,\n                dashboard: 'webpack-dashboard -- webpack-dev-server --config ./webpack.config.js'\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Configure dev task',\n        task: async ({skipInstall}) => {\n            const scripts = {\n                dev: 'stmux [ \\\"npm run dashboard\\\" : \\\"npm run lint:ing\\\" ]'\n            };\n            await install(['stmux'], {dev: true, skipInstall});\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json', '.eslintrc.js'),\n        optional: () => allDoExistSync('package.json', '.eslintrc.js')\n    },\n    {\n        text: 'Install Webpack and development dependencies',\n        task: ({skipInstall}) => install([...BUILD_DEPENDENCIES, ...WEBPACK_DEPENDENCIES], {dev: true, skipInstall}),\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    },\n    {\n        text: 'Install Cesium dependencies',\n        task: ({skipInstall, useReact}) => install(useReact ? RESIUM_DEPENDENCIES : CESIUM_DEPENDENCIES, {skipInstall}),\n        condition: ({withCesium}) => withCesium,\n        optional: ({withCesium}) => withCesium\n    }\n];\nexport const removeWebpack = [\n    {\n        text: 'Delete Webpack configuration file',\n        task: async () => {\n            await (new WebpackConfigEditor())\n                .delete()\n                .commit();\n        },\n        condition: () => allDoExist('webpack.config.js')\n    },\n    {\n        text: 'Remove Webpack build tasks from package.json',\n        task: async () => {\n            const scripts = {\n                copy: undefined,\n                'copy:assets': undefined,\n                'copy:index': undefined,\n                'watch:assets': undefined,\n                dev: undefined,\n                'prebuild:es': undefined,\n                'build:es': undefined,\n                'postbuild:es': undefined,\n                'watch:es': undefined,\n                dashboard: undefined,\n                predeploy: undefined,\n                deploy: undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Uninstall Webpack dependencies',\n        task: () => uninstall([...BUILD_DEPENDENCIES, ...WEBPACK_DEPENDENCIES, 'stmux']),\n        condition: ({skipInstall}) => !skipInstall && allDoExist('package.json') && (new PackageJsonEditor()).hasAll(...WEBPACK_DEPENDENCIES),\n        optional: ({skipInstall}) => !skipInstall\n    },\n    {\n        text: 'Uninstall Cesium Webpack dependencies',\n        task: () => uninstall(WEBPACK_WITH_CESIUM_DEPENDENCIES),\n        condition: ({skipInstall}) => !skipInstall && allDoExist('package.json') && (new PackageJsonEditor()).hasAll(...WEBPACK_WITH_CESIUM_DEPENDENCIES), //eslint-disable-line max-len\n        optional: ({skipInstall, withCesium}) => !skipInstall && withCesium\n    }\n];\nexport default addWebpack;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/add-webpack.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "DEPLOY_SCRIPTS",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~DEPLOY_SCRIPTS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{\"predeploy\": string, \"deploy\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "BUILD_DEPENDENCIES",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~BUILD_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "WEBPACK_DEPENDENCIES",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~WEBPACK_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "WEBPACK_WITH_CESIUM_DEPENDENCIES",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~WEBPACK_WITH_CESIUM_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "WEBPACK_RULES",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~WEBPACK_RULES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "WEBPACK_RULES_WITH_CESIUM",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~WEBPACK_RULES_WITH_CESIUM",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "name": "WEBPACK_PLUGINS",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~WEBPACK_PLUGINS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "WEBPACK_PLUGINS_WITH_CESIUM",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~WEBPACK_PLUGINS_WITH_CESIUM",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "CESIUM_DEPENDENCIES",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~CESIUM_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "RESIUM_DEPENDENCIES",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~RESIUM_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "function",
    "name": "getAliasOption",
    "memberof": "src/commands/add-webpack.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-webpack.js~getAliasOption",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "useReact",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      },
      {
        "name": "withCesium",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "{...undefined: Object}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "getDevServerOption",
    "memberof": "src/commands/add-webpack.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-webpack.js~getDevServerOption",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "outputDirectory",
        "types": [
          "*"
        ]
      },
      {
        "name": "port",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "getEntryOption",
    "memberof": "src/commands/add-webpack.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-webpack.js~getEntryOption",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "sourceDirectory",
        "types": [
          "*"
        ]
      },
      {
        "name": "useReact",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "getResolveOption",
    "memberof": "src/commands/add-webpack.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-webpack.js~getResolveOption",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [
      {
        "name": "sourceDirectory",
        "types": [
          "*"
        ]
      },
      {
        "name": "alias",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "useReact",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "getWebpackConfigPrependContent",
    "memberof": "src/commands/add-webpack.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-webpack.js~getWebpackConfigPrependContent",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "withCesium",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "variable",
    "name": "addWebpack",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~addWebpack",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": "{addWebpack}",
    "description": "",
    "see": [
      "https://webpack.js.org/"
    ],
    "lineNumber": 129,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "removeWebpack",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~removeWebpack",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": "{removeWebpack}",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "src/commands/common.js",
    "content": "import {join} from 'path';\nimport {mkdirp} from 'fs-extra';\nimport {PackageJsonEditor} from '../utils';\nimport {allDoNotExist} from '../utils/common';\nimport {Scaffolder} from '../utils/Scaffolder';\n\n/** @ignore */\nexport const createEditorConfiguration = [\n    {\n        text: 'Create editor configuration file',\n        task: async ({overwrite}) => {\n            await (new Scaffolder(join(__dirname, 'common', 'templates')))\n                .overwrite(overwrite)\n                .target('.')\n                .copy('.editorconfig', '.editorconfig')\n                .commit();\n        },\n        condition: () => allDoNotExist('.editorconfig')\n    }\n];\n/** @ignore */\nexport const createPackageJson = [\n    {\n        text: 'Create package.json',\n        task: async () => {\n            await (new PackageJsonEditor())\n                .create()\n                .commit();\n        },\n        condition: () => allDoNotExist('package.json')\n    }\n];\n/** @ignore */\nexport const createSourceDirectory = [\n    {\n        text: 'Create source directory',\n        task: ({sourceDirectory}) => mkdirp(sourceDirectory),\n        condition: ({sourceDirectory}) => allDoNotExist(sourceDirectory)\n    }\n];",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/common.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "createEditorConfiguration",
    "memberof": "src/commands/common.js",
    "static": true,
    "longname": "src/commands/common.js~createEditorConfiguration",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/common.js",
    "importStyle": "{createEditorConfiguration}",
    "description": null,
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "createPackageJson",
    "memberof": "src/commands/common.js",
    "static": true,
    "longname": "src/commands/common.js~createPackageJson",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/common.js",
    "importStyle": "{createPackageJson}",
    "description": null,
    "lineNumber": 22,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "createSourceDirectory",
    "memberof": "src/commands/common.js",
    "static": true,
    "longname": "src/commands/common.js~createSourceDirectory",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/common.js",
    "importStyle": "{createSourceDirectory}",
    "description": null,
    "lineNumber": 34,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "src/commands/create-server/index.js",
    "content": "import {join} from 'path';\nimport {\n    EslintConfigModuleEditor,\n    PackageJsonEditor,\n    install\n} from '../../utils';\nimport {allDoExist, allDoExistSync} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\n\nconst DEPENDENCIES = [\n    'apollo-server-express',\n    'compression',\n    'config',\n    'cookie-session',\n    'dotenv',\n    'ejs',\n    'express',\n    'express-session',\n    'fs-extra',\n    'graphql',\n    'helmet',\n    'lusca',\n    'remarkable',\n    'highlight.js',\n    'uuid',\n    'npmlog',\n    'protocolify',\n    'ws'\n];\nconst DEV_DEPENDENCIES = [\n    'nodemon',\n    'open-cli',\n    'stmux',\n    'supertest'\n];\nconst ALWAYS = () => true;\n/**\n * @type {task[]}\n * @see https://expressjs.com/\n * @see https://github.com/websockets/ws\n * @see https://www.apollographql.com/docs/apollo-server/\n */\nexport const tasks = [\n    {\n        text: 'Copy server files',\n        task: async ({overwrite}) => {\n            await (new Scaffolder(join(__dirname, 'templates')))\n                .overwrite(overwrite)\n                .target('./')\n                .copy('.env')\n                .copy('favicon.ico')\n                .copy('_gitignore', '.gitignore')\n                .copy('index.js')\n                .copy('server.js')\n                .copy('socket.js')\n                .copy('graphql.js')\n                .copy('db.json')\n                .target('config')\n                .copy('default.js')\n                .copy('default.js', 'test.js')\n                .target('ssl')\n                .copy('server.key')\n                .copy('server.cert')\n                .target('public')\n                .copy('index.html')\n                .copy('example.md')\n                .target('__tests__')\n                .overwrite(true)\n                .copy('example.test.js')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Configure metadata and add tasks to package.json',\n        task: async () => {\n            const description = `Node.js HTTP(S), WebSocket, and GraphQL servers with an 80% solution for security 'baked in'`;\n            const main = 'index.js';\n            const name = 'tomo-server';\n            const scripts = {\n                predev: 'npm run open',\n                dev: 'stmux [ \\\"nodemon index.js\\\" : \\\"npm run lint:ing\\\" ]',\n                prestart: 'npm audit --production',\n                start: `node ${main}`,\n                open: 'open-cli http://localhost:8111'\n            };\n            await (new PackageJsonEditor())\n                .extend({description, main, name, scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Configure .eslintrc.js for use with Node.js',\n        task: async ({browser}) => {\n            const env = {\n                browser,\n                node: true\n            };\n            await (new EslintConfigModuleEditor())\n                .extend({env})\n                .commit();\n        },\n        condition: () => allDoExist('.eslintrc.js'),\n        optional: () => allDoExistSync('.eslintrc.js')\n    },\n    {\n        text: 'Install server dependencies',\n        task: async ({skipInstall}) => {\n            await install(DEPENDENCIES, {skipInstall});\n            await install(DEV_DEPENDENCIES, {dev: true, skipInstall});\n        },\n        condition: ({isNotOffline, skipInstall}) => !skipInstall && isNotOffline && allDoExist('package.json')\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/create-server/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "DEPENDENCIES",
    "memberof": "src/commands/create-server/index.js",
    "static": true,
    "longname": "src/commands/create-server/index.js~DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "DEV_DEPENDENCIES",
    "memberof": "src/commands/create-server/index.js",
    "static": true,
    "longname": "src/commands/create-server/index.js~DEV_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "ALWAYS",
    "memberof": "src/commands/create-server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/create-server/index.js~ALWAYS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/create-server/index.js",
    "static": true,
    "longname": "src/commands/create-server/index.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/create-server/index.js",
    "importStyle": "{tasks}",
    "description": "",
    "see": [
      "https://expressjs.com/",
      "https://github.com/websockets/ws",
      "https://www.apollographql.com/docs/apollo-server/"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "src/commands/create-server/templates/default.js",
    "content": "const uuid = require('uuid/v1');\n\nmodule.exports = {\n    execMap: {\n        py: 'python',\n        rb: 'ruby'\n    },\n    session: {\n        name: 'customSessionId',\n        secret: 'Quidquid latine dictum, altum videtur',\n        genid: function() {\n            return uuid();\n        },\n        resave: false,\n        saveUninitialized: false,\n        cookie: {httpOnly: true, secure: true}\n    },\n    websocket: {\n        port: 13337\n    },\n    http: {\n        port: process.env.PORT || 8111// eslint-disable-line no-magic-numbers\n    },\n    https: {\n        port: 8443\n    },\n    graphql: {\n        port: 4669\n    },\n    log: {\n        level: 'error'\n    },\n    csp: {\n        'frame-ancestors': `'self'`,\n        'default-src': `'self'`,\n        'script-src':  `'self' cdnjs.cloudflare.com`,\n        'font-src': `'self' fonts.gstatic.com data:`\n    }\n};\n",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/create-server/templates/default.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "uuid",
    "memberof": "src/commands/create-server/templates/default.js",
    "static": true,
    "longname": "src/commands/create-server/templates/default.js~uuid",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/default.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/commands/create-server/templates/example.test.js",
    "content": "const request = require('supertest');\nconst server = require('../server');\nconst graphql = require('../graphql');\n\nconst STATUS_OK = 200;\n\ndescribe('HTTP Server', () => {\n    test('load root path', async () => {\n        const {statusCode} = await request(server).get('/');\n        expect(statusCode).toBe(STATUS_OK);\n    });\n    test('load example markdown file', async () => {\n        const {statusCode} = await request(server).get('/example.md');\n        expect(statusCode).toBe(STATUS_OK);\n    });\n});\ndescribe('GraphQL Server', () => {\n    test('load root path', async () => {\n        const {statusCode} = await request(graphql).get('/');\n        expect(statusCode).toBe(STATUS_OK);\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/create-server/templates/example.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "request",
    "memberof": "src/commands/create-server/templates/example.test.js",
    "static": true,
    "longname": "src/commands/create-server/templates/example.test.js~request",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/example.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "server",
    "memberof": "src/commands/create-server/templates/example.test.js",
    "static": true,
    "longname": "src/commands/create-server/templates/example.test.js~server",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/example.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "graphql",
    "memberof": "src/commands/create-server/templates/example.test.js",
    "static": true,
    "longname": "src/commands/create-server/templates/example.test.js~graphql",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/example.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "variable",
    "name": "STATUS_OK",
    "memberof": "src/commands/create-server/templates/example.test.js",
    "static": true,
    "longname": "src/commands/create-server/templates/example.test.js~STATUS_OK",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/example.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "src/commands/create-server/templates/graphql.js",
    "content": "/**\n * GraphQL Server\n * @see {@link https://www.apollographql.com/docs/apollo-server}\n */\nconst {ApolloServer, gql} = require('apollo-server-express');\nconst app = require('./server');\n//\n// API test data\n//\nconst {data: {authors, posts}} = require('./db.json');\n//\n// API configuration\n//\nconst Query = gql`\n  type Query {\n    posts: [Post]\n    author(id: Int!): Author\n  }\n  `;\nconst Author = gql`\n  type Author {\n    id: Int!\n    firstName: String\n    lastName: String\n    posts: [Post]\n  }\n  `;\nconst Post = gql`\n  type Post {\n    id: Int!\n    title: String\n    author: Author\n    votes: Int\n  }\n  `;\nconst typeDefs = [Query, Author, Post];\nconst resolvers = {\n    Query: {\n        posts: () => posts,\n        author: (_, {id}) => authors.find(author => (author.id === id))\n    },\n    Author: {\n        posts: author => posts.filter(post => (post.authorId === author.id))\n    },\n    Post: {\n        author: post => authors.find(author => (author.id === post.authorId))\n    }\n};\nconst playground = {\n    endpoint: '/graphql',\n    settings: {\n        'editor.theme': 'dark'\n    }\n};\nconst server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    playground\n});\nserver.applyMiddleware({app});\n\nmodule.exports = app;\n",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/create-server/templates/graphql.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "name": "ApolloServer",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~ApolloServer",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": "GraphQL Server",
    "see": [
      "{@link https://www.apollographql.com/docs/apollo-server}"
    ],
    "lineNumber": 5,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "variable",
    "name": "app",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~app",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "variable",
    "name": "data",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~data",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "variable",
    "name": "Query",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~Query",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "variable",
    "name": "Author",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~Author",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 201,
    "kind": "variable",
    "name": "Post",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~Post",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 202,
    "kind": "variable",
    "name": "typeDefs",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~typeDefs",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 203,
    "kind": "variable",
    "name": "resolvers",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~resolvers",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "{\"Query\": *, \"Author\": *, \"Post\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "name": "playground",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~playground",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "{\"endpoint\": string, \"settings\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "name": "server",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~server",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "src/commands/create-server/templates/index.js",
    "content": "require('dotenv').config();\n\nconst config = require('config');\nconst log = require('npmlog');\nconst fs = require('fs-extra');\nconst https = require('https');\n//\n// SSL credentials\n//\nconst key = fs.readFileSync('ssl/server.key', 'utf8');\nconst cert = fs.readFileSync('ssl/server.cert', 'utf8');\n//\n// Handle error conditions\n//\nprocess.on('SIGTERM', () => {\n    log.warn('exit', 'Exited on SIGTERM');\n    process.exit(0);\n});\nprocess.on('SIGINT', () => {\n    log.warn('exit', 'Exited on SIGINT');\n    process.exit(0);\n});\nprocess.on('uncaughtException', err => {\n    log.error('uncaughtException ', err);\n    process.exit(1);\n});\n//\n// Static HTTP Server\n//\nconst app = require('./server');\napp.listen(config.get('http').port);\n//\n// Static HTTPS Server\n//\nhttps.createServer({key, cert}, app).listen(config.get('https').port);\n//\n// WebSocket Server\n//\nconst wss = require('./socket');\nwss.on('error', data => log.error(data));\n//\n// GraphQL Server\n//\nconst gql = require('./graphql');\ngql.listen(config.get('graphql').port);\n//\n// Log startup and port numbers\n//\nlog.info('HTTP server started........', 'Listening on port %j', config.get('http').port);\nlog.info('HTTPS server started.......', 'Listening on port %j', config.get('https').port);\nlog.info('WebSocket server started...', 'Listening on port %j', config.get('websocket').port);\nlog.info('GraphQL server started.....', 'Listening on port %j', config.get('graphql').port);\n",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/create-server/templates/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "variable",
    "name": "config",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~config",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "log",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~log",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "name": "fs",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~fs",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 210,
    "kind": "variable",
    "name": "https",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~https",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "variable",
    "name": "key",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~key",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "cert",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~cert",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "app",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~app",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "wss",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~wss",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "gql",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~gql",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "src/commands/create-server/templates/socket.js",
    "content": "/**\n * WebSocket Server\n * @see {@link https://github.com/websockets/ws}\n */\nconst config = require('config');\nconst log = require('npmlog');\nconst {Server} = require('ws');\n\nconst wss = new Server({\n    app: require(`${__dirname}/server`),\n    port: config.get('websocket').port\n});\n\nwss.broadcast = data => {\n    wss.clients.forEach(client => {\n        client.send(data);\n    });\n};\nwss.on('connection', socket => {\n    log.info(`${wss.clients.length} client(s) connected.`);\n    socket.on('message', message => {\n        log.info('received: %s', message);\n        socket.send(message);\n    });\n});\n\nmodule.exports = wss;\n",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/create-server/templates/socket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "variable",
    "name": "config",
    "memberof": "src/commands/create-server/templates/socket.js",
    "static": true,
    "longname": "src/commands/create-server/templates/socket.js~config",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/socket.js",
    "importStyle": null,
    "description": "WebSocket Server",
    "see": [
      "{@link https://github.com/websockets/ws}"
    ],
    "lineNumber": 5,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "name": "log",
    "memberof": "src/commands/create-server/templates/socket.js",
    "static": true,
    "longname": "src/commands/create-server/templates/socket.js~log",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/socket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "Server",
    "memberof": "src/commands/create-server/templates/socket.js",
    "static": true,
    "longname": "src/commands/create-server/templates/socket.js~Server",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/socket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "wss",
    "memberof": "src/commands/create-server/templates/socket.js",
    "static": true,
    "longname": "src/commands/create-server/templates/socket.js~wss",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/socket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "src/commands/index.js",
    "content": "/* eslint-disable no-magic-numbers */\nimport {choose, withOptions} from '../utils';\nimport {createEditorConfiguration, createPackageJson, createSourceDirectory} from './common';\nimport {addA11y, removeA11y} from './add-a11y';\nimport addBabel from './add-babel';\nimport {addBrowsersync, removeBrowsersync} from './add-browsersync';\nimport {addCypress, removeCypress} from './add-cypress';\nimport addElectron from './add-electron';\nimport addEsdoc from './add-esdoc';\nimport addEslint from './add-eslint';\nimport addJest from './add-jest';\nimport addMakefile from './add-makefile';\nimport addMarionette from './add-marionette';\nimport {addParcel, removeParcel} from './add-parcel';\nimport {addPostcss, removePostcss} from './add-postcss';\nimport addReact from './add-react';\nimport {addReason, removeReason} from './add-reason';\nimport {addRollup, removeRollup} from './add-rollup';\nimport {addWebpack, removeWebpack} from './add-webpack';\nimport createServer from './create-server';\n\nconst createProject = [\n    ...createPackageJson,\n    ...createEditorConfiguration,\n    ...createSourceDirectory,\n    ...addBabel,\n    ...addEslint\n];\nconst create = {\n    project: createProject,\n    app: [\n        withOptions({browser: true}),\n        ...createProject,\n        ...addPostcss,\n        ...addJest,\n        choose({\n            default: addWebpack,\n            useRollup: addRollup,\n            useParcel: addParcel\n        }),\n        choose({\n            default: addMarionette,\n            native: [\n                withOptions({outputDirectory: './dist', sourceDirectory: './renderer/src', assetsDirectory: './renderer/assets', useReact: false}),\n                ...addMarionette, // Only Marionette.js support, for native react apps, one should probably use ReactNative\n                ...addElectron\n            ],\n            useReact: [\n                withOptions({browser: true, useRollup: false}), // Rollup does not support HMR - it's just not worth using Rollup for a React app.\n                ...addReact\n            ]\n        }),\n        choose({\n            default: addBrowsersync,\n            useRollup: addBrowsersync,\n            native: [], // do nothing\n            useParcel: [], // do nothing\n            useReact: [] // do nothing\n        })\n    ],\n    server: [\n        withOptions({browser: false, sourceDirectory: '.', useReact: false}),\n        ...createPackageJson,\n        ...addEslint,\n        ...addJest,\n        ...createServer\n    ]\n};\nconst add = {\n    a11y: addA11y,\n    babel: addBabel,\n    browsersync: addBrowsersync,\n    cypress: addCypress,\n    electron: addElectron,\n    esdoc: addEsdoc,\n    eslint: [\n        ...addBabel,\n        ...addEslint\n    ],\n    jest: [\n        ...addBabel,\n        ...addJest\n    ],\n    makefile: addMakefile,\n    marionette: addMarionette,\n    parcel: [\n        withOptions({useParcel: true}),\n        ...addBabel,\n        ...addParcel\n    ],\n    postcss: addPostcss,\n    react: [\n        withOptions({useReact: true}),\n        ...addReact\n    ],\n    reason: [\n        withOptions({useReact: true}),\n        ...addReason\n    ],\n    rollup: [\n        withOptions({useRollup: true}),\n        ...addBabel,\n        ...addRollup\n    ],\n    webpack: [\n        ...addBabel,\n        ...addWebpack\n    ]\n};\nconst remove = {\n    a11y: removeA11y,\n    browsersync: removeBrowsersync,\n    cypress: removeCypress,\n    parcel: removeParcel,\n    postcss: removePostcss,\n    reason: removeReason,\n    rollup: removeRollup,\n    webpack: removeWebpack\n};\n\nexport default {\n    add,\n    remove,\n    create,\n    new: create// alias for create\n};\n/**\n * @typedef {Object} task\n * @property {string} text Display text for task\n * @property {function} task Task to execute\n * @property {function} condition Predicate to decide when to execute the task (true) or not (false) - can be async or sync\n * @property {function} [optional] Predicate to decide when to show the task (true) or not (false) - MUST be sync\n */",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/commands/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "createProject",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~createProject",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "create",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~create",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "{\"project\": *, \"app\": *, \"server\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "add",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~add",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "{\"a11y\": *, \"babel\": *, \"browsersync\": *, \"cypress\": *, \"electron\": *, \"esdoc\": *, \"eslint\": *, \"jest\": *, \"makefile\": *, \"marionette\": *, \"parcel\": *, \"postcss\": *, \"react\": *, \"reason\": *, \"rollup\": *, \"webpack\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 225,
    "kind": "variable",
    "name": "remove",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~remove",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "{\"a11y\": *, \"browsersync\": *, \"cypress\": *, \"parcel\": *, \"postcss\": *, \"reason\": *, \"rollup\": *, \"webpack\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 226,
    "kind": "typedef",
    "name": "task",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~task",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Display text for task"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "task",
        "description": "Task to execute"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "Predicate to decide when to execute the task (true) or not (false) - can be async or sync"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "optional",
        "description": "Predicate to decide when to show the task (true) or not (false) - MUST be sync"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "task"
    }
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/index.js",
    "content": "#!/usr/bin/env node\nimport {join} from 'path';\nimport React from 'react';\nimport {cyan, dim} from 'chalk';\nimport {render} from 'ink';\nimport meow from 'meow';\nimport read from 'read-pkg';\nimport getStdin from 'get-stdin';\nimport Tomo from './ui';\n// import updateNotifier from 'update-notifier';\n// Notify updater\n// const pkg = require(`../package.json`);\n// updateNotifier({pkg}).notify();\n\nconst showVersion = () => {\n    const cwd = join(__dirname, '..');\n    const {version} = read.sync({cwd});\n    console.log(version); // eslint-disable-line no-console\n    process.exit();\n};\nconst help = `\n    ${dim.bold('Usage')}\n\n        ${cyan('>')} tomo [commands] [terms] [options]\n        \n        ${cyan('>')} tomo version\n\n        ${cyan('>')} tomo new app --use-react --use-parcel\n        \n        ${cyan('>')} tomo add\n\n\n    ${dim.bold('Commands')}\n\n        new, add, remove, version\n\n\n    ${dim.bold('Terms')}\n\n        [new]\n        project, app, server\n\n        [add]\n        a11y, babel, browsersync, cypress, electron, esdoc, eslint, jest,\n        marionette, makefile, parcel, postcss, react, reason, rollup, webpack \n\n        [remove]\n        a11y, browsersync, cypress, parcel, postcss, reason, rollup, webpack\n\n\n    ${dim.bold('Options')}\n\n        --version, -v           Print version\n        --source-directory, -d  Directory for source code [Default: ./src]\n        --output-directory, -o  Directory for build targets [Default: ./dist]\n        --assets-directory, -a  Directory for assets [Default: ./assets]\n        --use-rollup,           Use Rollup instead of Webpack [Default: false]\n        --use-parcel,           Use Parcel instead of Webpack [Default: false]\n        --use-react, -r         Add React support to workflow [Default: false]\n        --react-version         React version for ESLint configuration [Default: '16.8']\n        --with-cesium           Add CesiumJS to your project [Default: false]\n        --ignore-warnings, -i   Ignore warning messages [Default: false]\n        --skip-install, -s      Skip npm installations [Default: false]\n        --overwrite             Copy files, even if they alrady exist [Default: false]\n        --browser               Indicate tasks are intended for the browser [Default: false]\n        --port, -p              Configure port for workflow tasks that use it [Default: 4669]\n        --debug                 Show debug data [Default: false]\t\n`;\nconst options = {\n    help,\n    flags: {\n        version: {\n            type: 'boolean',\n            default: false,\n            alias: 'v'\n        },\n        sourceDirectory: {\n            type: 'string',\n            default: './src',\n            alias: 'd'\n        },\n        outputDirectory: {\n            type: 'string',\n            default: './dist',\n            alias: 'o'\n        },\n        assetsDirectory: {\n            type: 'string',\n            default: './assets',\n            alias: 'a'\n        },\n        useRollup: {\n            type: 'boolean',\n            default: false,\n            alias: 'rollup'\n        },\n        useParcel: {\n            type: 'boolean',\n            default: false,\n            alias: 'parcel'\n        },\n        useReact: {\n            type: 'boolean',\n            default: false,\n            alias: ['r', 'react']\n        },\n        reactVersion: {\n            type: 'string',\n            default: '16.8'\n        },\n        withCesium: {\n            type: 'boolean',\n            default: false\n        },\n        ignoreWarnings: {\n            type: 'boolean',\n            default: false,\n            alias: 'i'\n        },\n        skipInstall: {\n            type: 'boolean',\n            default: false,\n            alias: 's'\n        },\n        browser: {\n            type: 'boolean',\n            default: false,\n            alias: 'b'\n        },\n        port: {\n            type: 'number',\n            default: 4669,\n            alias: 'p'\n        },\n        overwrite: {\n            type: 'boolean',\n            default: false\n        },\n        debug: {\n            type: 'boolean',\n            default: false\n        }\n    }\n};\nconst {input, flags} = meow(options);\n(input[0] === 'version' || flags.version) && showVersion();\n(async () => {\n    const stdin = await getStdin();\n    render(<Tomo input={input} flags={flags} stdin={stdin}/>, {exitOnCtrlC: true});\n})();",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "showVersion",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~showVersion",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "help",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~help",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "name": "options",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~options",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "{\"help\": *, \"flags\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "name": "input",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~input",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "src/utils/BasicEditor.js",
    "content": "import {join} from 'path';\nimport Queue from 'p-queue';\nimport memFs from 'mem-fs';\nimport editor from 'mem-fs-editor';\n\nconst {assign} = Object;\n/**\n * Base class to serve as base for JSON and module builder classes\n */\nexport class BasicEditor {\n    constructor() {\n        const fs = editor.create(memFs.create());\n        const queue = new Queue({concurrency: 1});\n        assign(this, {fs, queue});\n    }\n    /**\n     *\n     * @param {string} destination Destination to copy file\n     * @return {BasicEditor} Chaining OK\n     */\n    copy(destination) {\n        const self = this;\n        const {fs, path, queue} = self;\n        const [filename] = path.split('/').reverse();\n        queue.add(() => fs.copy(path, join(destination, filename)));\n        return self;\n    }\n    /**\n     * @return {BasicEditor} Chaining OK\n     */\n    delete() {\n        const self = this;\n        const {fs, path, queue} = self;\n        queue.add(() => fs.delete(path));\n        return self;\n    }\n    done() {\n        return this.queue.onEmpty();\n    }\n    /**\n     * Write changes to disk\n     * @return {Promise} Resolves when queue is empty\n     */\n    async commit() {\n        const {fs} = this;\n        await new Promise(resolve => fs.commit(resolve));\n        await this.done();\n    }\n}\nexport default BasicEditor;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/utils/BasicEditor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "variable",
    "name": "assign",
    "memberof": "src/utils/BasicEditor.js",
    "static": true,
    "longname": "src/utils/BasicEditor.js~assign",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/BasicEditor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 234,
    "kind": "class",
    "name": "BasicEditor",
    "memberof": "src/utils/BasicEditor.js",
    "static": true,
    "longname": "src/utils/BasicEditor.js~BasicEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/BasicEditor.js",
    "importStyle": "{BasicEditor}",
    "description": "Base class to serve as base for JSON and module builder classes",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 235,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/BasicEditor.js~BasicEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/BasicEditor.js~BasicEditor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "copy",
    "memberof": "src/utils/BasicEditor.js~BasicEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/BasicEditor.js~BasicEditor#copy",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": "Destination to copy file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BasicEditor"
      ],
      "spread": false,
      "description": "Chaining OK"
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "delete",
    "memberof": "src/utils/BasicEditor.js~BasicEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/BasicEditor.js~BasicEditor#delete",
    "access": "public",
    "description": "",
    "lineNumber": 31,
    "return": {
      "nullable": null,
      "types": [
        "BasicEditor"
      ],
      "spread": false,
      "description": "Chaining OK"
    },
    "params": []
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "done",
    "memberof": "src/utils/BasicEditor.js~BasicEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/BasicEditor.js~BasicEditor#done",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "commit",
    "memberof": "src/utils/BasicEditor.js~BasicEditor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils/BasicEditor.js~BasicEditor#commit",
    "access": "public",
    "description": "Write changes to disk",
    "lineNumber": 44,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when queue is empty"
    },
    "params": []
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "src/utils/Scaffolder.js",
    "content": "import {join} from 'path';\nimport Queue from 'p-queue';\nimport memFs from 'mem-fs';\nimport editor from 'mem-fs-editor';\n\nconst {assign} = Object;\nconst silent = () => {};\n/**\n * Class to create scaffolders when creating folders, and copying files/templates\n * @example\n * import {Scaffolder} from './utils';\n * const scaffolder = new Scaffolder('path/to/templates');\n * await scaffolder\n *     .target('/path/to/copy/files')\n *     .copy('foo.js')\n *     .copy('bar.js')\n *     .commit();\n */\nexport class Scaffolder {\n    /**\n     * @param {string} sourceDirectory Source directory for template files\n     */\n    constructor(sourceDirectory = './templates') {\n        const copyIfExists = false;\n        const targetDirectory = './';\n        const fs = editor.create(memFs.create());\n        const queue = new Queue({concurrency: 1});\n        assign(this, {copyIfExists, fs, queue, sourceDirectory, targetDirectory});\n    }\n    /**\n     * Set target directory\n     * @param {string} targetDirectory Target directory of template files\n     * @returns {Scaffolder} Chaining OK\n     */\n    target(targetDirectory) {\n        return assign(this, {targetDirectory});\n    }\n    /**\n     * Set overwrite flag\n     * @param {boolean} flag Overwrite files (true) or not (false)\n     * @returns {Scaffolder} Chaining OK\n     */\n    overwrite(flag) {\n        return assign(this, {copyIfExists: flag});\n    }\n    /**\n     * Copy a file\n     * @param {string} path Path string of file to be copied\n     * @param {string} [filename] Name for copied file\n     * @returns {Scaffolder} Chaining OK\n     */\n    copy(path, filename) {\n        const self = this;\n        const {copyIfExists, fs, queue, sourceDirectory, targetDirectory} = self;\n        const source = join(sourceDirectory, path);\n        const target = join(process.cwd(), targetDirectory, ...((typeof filename === 'string') ? filename : path).split('/'));\n        const shouldCopy = !fs.exists(target) || copyIfExists;\n        shouldCopy && queue.add(() => fs.copy(source, target)).catch(silent);\n        return self;\n    }\n    /**\n     * Write changes to disk\n     * @return {Promise} Resolves when queue is empty\n     */\n    async commit() {\n        const {fs, queue} = this;\n        await new Promise(resolve => fs.commit(resolve));\n        await queue.onEmpty();\n    }\n}\nexport default Scaffolder;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/utils/Scaffolder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "name": "assign",
    "memberof": "src/utils/Scaffolder.js",
    "static": true,
    "longname": "src/utils/Scaffolder.js~assign",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/Scaffolder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "silent",
    "memberof": "src/utils/Scaffolder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Scaffolder.js~silent",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/Scaffolder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "class",
    "name": "Scaffolder",
    "memberof": "src/utils/Scaffolder.js",
    "static": true,
    "longname": "src/utils/Scaffolder.js~Scaffolder",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/Scaffolder.js",
    "importStyle": "{Scaffolder}",
    "description": "Class to create scaffolders when creating folders, and copying files/templates",
    "examples": [
      "import {Scaffolder} from './utils';\nconst scaffolder = new Scaffolder('path/to/templates');\nawait scaffolder\n    .target('/path/to/copy/files')\n    .copy('foo.js')\n    .copy('bar.js')\n    .commit();"
    ],
    "lineNumber": 19,
    "interface": false
  },
  {
    "__docId__": 244,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/Scaffolder.js~Scaffolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Scaffolder.js~Scaffolder#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceDirectory",
        "description": "Source directory for template files"
      }
    ]
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "target",
    "memberof": "src/utils/Scaffolder.js~Scaffolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Scaffolder.js~Scaffolder#target",
    "access": "public",
    "description": "Set target directory",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Scaffolder} Chaining OK"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetDirectory",
        "description": "Target directory of template files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Scaffolder"
      ],
      "spread": false,
      "description": "Chaining OK"
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "overwrite",
    "memberof": "src/utils/Scaffolder.js~Scaffolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Scaffolder.js~Scaffolder#overwrite",
    "access": "public",
    "description": "Set overwrite flag",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Scaffolder} Chaining OK"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "Overwrite files (true) or not (false)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Scaffolder"
      ],
      "spread": false,
      "description": "Chaining OK"
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "copy",
    "memberof": "src/utils/Scaffolder.js~Scaffolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Scaffolder.js~Scaffolder#copy",
    "access": "public",
    "description": "Copy a file",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Scaffolder} Chaining OK"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path string of file to be copied"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "filename",
        "description": "Name for copied file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Scaffolder"
      ],
      "spread": false,
      "description": "Chaining OK"
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "commit",
    "memberof": "src/utils/Scaffolder.js~Scaffolder",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils/Scaffolder.js~Scaffolder#commit",
    "access": "public",
    "description": "Write changes to disk",
    "lineNumber": 65,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when queue is empty"
    },
    "params": []
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "src/utils/createJsonEditor.js",
    "content": "import {join} from 'path';\nimport {existsSync} from 'fs-extra';\nimport BasicEditor from './BasicEditor';\nimport {parse} from './common';\n\nconst {assign} = Object;\nconst INDENT_SPACES = 4;\n/**\n * Create and edit a JSON file with a fluent API\n * @param {string} filename Name of file to edit\n * @param {object} [contents={}] Contents of file\n * @return {JsonEditor} JsonEditor class (extends {@link BasicEditor})\n */\nexport const createJsonEditor = (filename, contents = {}) => class JsonEditor extends BasicEditor {\n    contents = contents;\n    constructor(cwd = process.cwd()) {\n        super();\n        const path = join(cwd, filename);\n        assign(this, {path});\n    }\n    create() {\n        const self = this;\n        const {contents, fs, path, queue} = self;\n        existsSync(path) || queue.add(() => fs.writeJSON(path, contents, null, INDENT_SPACES));\n        return self;\n    }\n    read() {\n        const {fs, path} = this;\n        return fs.readJSON(path) || '';\n    }\n    extend(contents) {\n        const self = this;\n        const {fs, path, queue} = self;\n        queue.add(() => fs.extendJSON(path, contents, null, INDENT_SPACES));\n        return self;\n    }\n    /**\n     * Check if package.json manifest file has dependencies (dependencies or devDependencies)\n     * @param  {...string} modules npm module names\n     * @return {Boolean} Has at least one dependency (true) or none (false)\n     */\n    hasSome(...modules) {\n        const {keys} = Object;\n        const pkg = this.read();\n        const {dependencies, devDependencies} = parse(pkg);\n        const installed = [...keys(dependencies ? dependencies : {}), ...keys(devDependencies ? devDependencies : {})];\n        return modules.some(module => installed.includes(module));\n    }\n    /**\n     * Check if package.json manifest file has dependencies (dependencies or devDependencies)\n     * @param  {...string} modules npm module names\n     * @return {Boolean} Has all dependencies (true) or not all (false)\n     */\n    hasAll(...modules) {\n        const {keys} = Object;\n        const pkg = this.read();\n        const {dependencies, devDependencies} = parse(pkg);\n        const installed = [...keys(dependencies ? dependencies : {}), ...keys(devDependencies ? devDependencies : {})];\n        return modules.every(module => installed.includes(module));\n    }\n};\nexport default createJsonEditor;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/utils/createJsonEditor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "variable",
    "name": "assign",
    "memberof": "src/utils/createJsonEditor.js",
    "static": true,
    "longname": "src/utils/createJsonEditor.js~assign",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/createJsonEditor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 251,
    "kind": "variable",
    "name": "INDENT_SPACES",
    "memberof": "src/utils/createJsonEditor.js",
    "static": true,
    "longname": "src/utils/createJsonEditor.js~INDENT_SPACES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/createJsonEditor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "createJsonEditor",
    "memberof": "src/utils/createJsonEditor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createJsonEditor.js~createJsonEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/createJsonEditor.js",
    "importStyle": "{createJsonEditor}",
    "description": "Create and edit a JSON file with a fluent API",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "Name of file to edit"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "contents",
        "description": "Contents of file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JsonEditor"
      ],
      "spread": false,
      "description": "JsonEditor class (extends {@link BasicEditor})"
    }
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "src/utils/createModuleEditor.js",
    "content": "import {join} from 'path';\nimport {existsSync} from 'fs-extra';\nimport merge from 'lodash.merge';\nimport {format} from './common';\nimport BasicEditor from './BasicEditor';\n\nconst {assign} = Object;\nconst silent = () => {};\nclass Common extends BasicEditor {\n    create() {\n        const self = this;\n        const {contents, path} = self;\n        self.created || (existsSync(path) || self.write(contents));\n        return self;\n    }\n    read() {\n        const {fs, path} = this;\n        return fs.exists(path) ? fs.read(path) : '';\n    }\n    write(contents) {\n        const self = this;\n        const {esm, fs, path, prependedContents, queue} = self;\n        const exportString = esm ? 'export default ' : 'module.exports = ';\n        const formatted = `${prependedContents}${exportString}${format(contents)}`.replace(/\\r*\\n$/g, ';');\n        queue\n            .add(() => fs.write(path, formatted))\n            .then(() => self.created = existsSync(path))\n            .catch(silent);\n        return assign(self, {contents});\n    }\n    extend(code) {\n        this.contents = merge(this.contents, code);\n        this.write(this.contents);\n        return this;\n    }\n    prepend(code) {\n        const self = this;\n        const {contents, prependedContents} = self;\n        if (typeof code === 'string' && code.length > 0) {\n            self.prependedContents = `${code}\\n${prependedContents}`.replace(/\\n*$/, '\\n\\n');\n        }\n        return self.write(contents);\n    }\n}\n/**\n * Create and edit a JS module with a fluent API\n * @param {string} filename Name of file to edit\n * @param {string} [contents=''] Contents of file\n * @param {Object} options Options to configure module\n * @param {boolean} [options.esm=false] Select to use 'module.exports =' (false) or 'export default' (true)\n * @return {ModuleEditor} ModuleEditor class (extends {@link BasicEditor})\n */\nexport const createModuleEditor = (filename, contents = '', options = {esm: false}) => class ModuleEditor extends Common {\n    prependedContents = '';\n    created = false;\n    constructor(cwd = process.cwd()) {\n        super();\n        const {esm} = options;\n        const path = join(cwd, filename);\n        assign(this, {contents, esm, path});\n    }\n};\n/**\n * Create and edit a JS module (with function export) using a fluent API\n * @param {string} filename Name of file to edit\n * @param {string} [contents=''] Contents of file\n * @param {Object} options Options to configure module\n * @param {string[]} [options.params=[]] Params to use as function parameters. ex: ['a', 'b'] becomes (a, b) => {}\n * @param {boolean} [options.esm=false] Select to use 'module.exports =' (false) or 'export default' (true)\n * @return {ModuleEditor} ModuleEditor class (extends {@link BasicEditor})\n */\nexport const createFunctionModuleEditor = (filename, contents = '', options = {params: [], esm: false}) => class ModuleEditor extends Common {\n    prependedContents = '';\n    created = false;\n    constructor(cwd = process.cwd()) {\n        super();\n        const {esm, params} = options;\n        const path = join(cwd, filename);\n        assign(this, {\n            contents,\n            esm,\n            path,\n            params: params || []\n        });\n    }\n    write(contents) {\n        const self = this;\n        const {esm, fs, params, path, prependedContents, queue} = self;\n        const exportString = esm ? `export default (${params.join(', ')}) => (` : `module.exports = (${params.join(', ')}) => (`;\n        const formatted = `${prependedContents}${exportString}${format(contents)}`.replace(/\\r*\\n$/g, ');');\n        queue\n            .add(() => fs.write(path, formatted))\n            .then(() => self.created = existsSync(path))\n            .catch(silent);\n        return assign(self, {contents});\n    }\n};\nexport default createModuleEditor;",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/utils/createModuleEditor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "variable",
    "name": "assign",
    "memberof": "src/utils/createModuleEditor.js",
    "static": true,
    "longname": "src/utils/createModuleEditor.js~assign",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/createModuleEditor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "silent",
    "memberof": "src/utils/createModuleEditor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createModuleEditor.js~silent",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/createModuleEditor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "class",
    "name": "Common",
    "memberof": "src/utils/createModuleEditor.js",
    "static": true,
    "longname": "src/utils/createModuleEditor.js~Common",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/createModuleEditor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/utils/BasicEditor.js~BasicEditor"
    ],
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "create",
    "memberof": "src/utils/createModuleEditor.js~Common",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/createModuleEditor.js~Common#create",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "read",
    "memberof": "src/utils/createModuleEditor.js~Common",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/createModuleEditor.js~Common#read",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "write",
    "memberof": "src/utils/createModuleEditor.js~Common",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/createModuleEditor.js~Common#write",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "contents",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "extend",
    "memberof": "src/utils/createModuleEditor.js~Common",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/createModuleEditor.js~Common#extend",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "code",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "contents",
    "memberof": "src/utils/createModuleEditor.js~Common",
    "static": false,
    "longname": "src/utils/createModuleEditor.js~Common#contents",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "prepend",
    "memberof": "src/utils/createModuleEditor.js~Common",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/createModuleEditor.js~Common#prepend",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "code",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "createModuleEditor",
    "memberof": "src/utils/createModuleEditor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createModuleEditor.js~createModuleEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/createModuleEditor.js",
    "importStyle": "{createModuleEditor}",
    "description": "Create and edit a JS module with a fluent API",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "Name of file to edit"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "contents",
        "description": "Contents of file"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options to configure module"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.esm",
        "description": "Select to use 'module.exports =' (false) or 'export default' (true)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": "ModuleEditor class (extends {@link BasicEditor})"
    }
  },
  {
    "__docId__": 264,
    "kind": "function",
    "name": "createFunctionModuleEditor",
    "memberof": "src/utils/createModuleEditor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createModuleEditor.js~createFunctionModuleEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/createModuleEditor.js",
    "importStyle": "{createFunctionModuleEditor}",
    "description": "Create and edit a JS module (with function export) using a fluent API",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "Name of file to edit"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "contents",
        "description": "Contents of file"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options to configure module"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "options.params",
        "description": "Params to use as function parameters. ex: ['a', 'b'] becomes (a, b) => {}"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.esm",
        "description": "Select to use 'module.exports =' (false) or 'export default' (true)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": "ModuleEditor class (extends {@link BasicEditor})"
    }
  },
  {
    "__docId__": 265,
    "kind": "file",
    "name": "src/utils/index.js",
    "content": "import execa from 'execa';\nimport semver from 'semver';\nimport {complement, has, head} from 'ramda';\nimport isOnline from 'is-online';\nimport {oneLineTrim} from 'common-tags';\nimport validate from 'validate-npm-package-name';\nimport {findBestMatch} from 'string-similarity';\nimport {dict} from './common';\nimport createJsonEditor from './createJsonEditor';\nimport {createFunctionModuleEditor, createModuleEditor} from './createModuleEditor';\n\nconst {assign, keys} = Object;\nconst {isArray} = Array;\nexport const isUniqueTask = ({text}, index, tasks) => tasks.map(({text}) => text).indexOf(text) === index;\nexport const isValidTask = val => has('text', val) && has('task', val) && (typeof val.text === 'string') && (typeof val.task === 'function');\nexport const withOptions = val => options => ({...options, ...val});\n/**\n * Choose tasks based on CLI options\n * @param {Object} choices Object to create choice dictionary from\n * @return {function} Accepts CLI options and returns array of tasks\n */\nexport const choose = choices => options => {\n    const possible = keys(choices);\n    const passed = keys(options);\n    const lookup = dict(choices);\n    const DEFAULT = lookup.has('default') ? lookup.get('default') : lookup.get(possible[0]);\n    const [choice] = possible.filter(val => passed.includes(val)).filter(val => options[val]);\n    return choice ? lookup.get(choice) : DEFAULT;\n};\n/**\n * Use string-similarity module to determine closest matching string\n * @param {Object} commands Object with commands as key values, terms as key values for each command object\n * @param {string} command Command string input\n * @param {string[]} [terms=[]] Terms input\n * @example\n * const [intendedCommand, intendedTerms] = getIntendedInput(commands, command, terms);\n * @return {string[]} [intendedCommand, intendedTerms] Array destructed assignment is recommended (see example)\n */\nexport const getIntendedInput = (commands, command, terms = []) => {\n    const VALID_COMMANDS = keys(commands);\n    const {bestMatch: {target: intendedCommand}} = findBestMatch(command, VALID_COMMANDS);\n    const VALID_TERMS = keys(commands[intendedCommand]);\n    const intendedTerms = terms.map(term => findBestMatch(term, VALID_TERMS).bestMatch.target);\n    return {intendedCommand, intendedTerms};\n};\n/**\n * Use npm CLI to return array of module versions\n * @param {string} name npm module name\n * @example\n * const versions = getVersions('react');\n * @return {string[]} Array of versions\n */\nexport const getVersions = async (name = '') => (name.length === 0) ? [] : (await execa('npm', ['view', name, 'versions']))\n    .stdout\n    .split(',\\n')\n    .map(str => str.match(/\\d+[.]\\d+[.]\\d+/))\n    .filter(isArray)\n    .map(head)\n    .map(semver.valid)\n    .filter(Boolean);\n/**\n * Install dependencies with npm\n * @param {string[]} [dependencies=[]] Modules to install\n * @param {Object} options Options to configure installation\n * @param {boolean} [options.dev=false] If true, add \"--save-dev\"\n * @param {boolean} [options.latest=true] If true, add \"@latest\" to all module names\n * @param {boolean} [options.skipInstall=false] Do not install (mostly for testing)\n * @example <caption>Install production dependencies</caption>\n * install(['react']);\n * @example <caption>Install development dependencies</caption>\n * install(['jest', 'babel-jest'], {dev: true});\n * @return {string[]} Array of inputs (mostly for testing)\n */\nexport const install = async (dependencies = [], options = {dev: false, latest: true, skipInstall: false}) => {\n    const {dev, latest, skipInstall} = options;\n    const identity = i => i;\n    const concat = val => str => str + val;\n    const args = ['install']\n        .concat(dependencies\n            .filter(name => validate(name).validForNewPackages)\n            .map(latest ? concat('@latest') : identity)\n        )\n        .concat(dev ? '--save-dev' : []);\n    skipInstall || await execa('npm', args);\n    return args;\n};\nexport const uninstall = async (dependencies = []) => {\n    const args = ['uninstall'].concat(dependencies.filter(name => validate(name).validForNewPackages));\n    (args.length === 1) || await execa('npm', args);\n    return args;\n};\n/**\n * Add async tasks to a queue, handle completion with actions dispatched via dispatch function\n * @param {Object} data Data to be used for populating queue\n * @param {Queue} [data.queue={}] p-queue instance\n * @param {Object[]} [data.tasks=[]] Array of task objects\n * @param {function} [data.dispatch=()=>{}] Function to dispatch task completion (complete, skip, error) actions\n * @param {Object} [data.options={}] Options object to pass to task function\n * @return {undefined} Returns nothing (side effects only)\n */\nexport async function populateQueue(data = {queue: {}, tasks: [], dispatch: () => { }, options: {skipInstall: false}}) {\n    const {queue, tasks, dispatch, options} = data;\n    const {skipInstall} = options;\n    const isNotOffline = skipInstall || await isOnline();\n    const customOptions = assign({}, tasks.filter(complement(isValidTask)).reduce((acc, val) => assign(acc, val), options), {isNotOffline});\n    dispatch({type: 'status', payload: {online: isNotOffline}});\n    for (const [index, item] of tasks.filter(isValidTask).filter(isUniqueTask).entries()) {\n        const {condition, task} = item;\n        try {\n            if (await condition(customOptions)) {\n                await queue\n                    .add(() => task(customOptions))\n                    .then(() => dispatch({type: 'complete', payload: index}))\n                    .catch(() => dispatch({\n                        type: 'error', payload: {\n                            index,\n                            title: 'Failed to add task to queue',\n                            location: 'task',\n                            details: item.text\n                        }\n                    }));\n            } else {\n                dispatch({type: 'skipped', payload: index});\n            }\n        } catch (error) {\n            dispatch({\n                type: 'error',\n                payload: {\n                    error,\n                    index,\n                    title: 'Failed to test task conditions',\n                    location: 'condition',\n                    details: item.text\n                }\n            });\n        }\n    }\n}\n/**\n * Create and edit a Babel.js configuration file with a fluent API\n * @type {ModuleEditor}\n * @example <caption>Extend module.exports content and prepend text to the top of the file</caption>\n * await (new BabelConfigModuleEditor())\n *     .create()\n *     .extend({presets: [`'@babel/preset-env'`]})\n *     .prepend(`const {existsSync} = require('fs-extra');`)\n *     .commit();\n */\nexport const BabelConfigModuleEditor = createModuleEditor('babel.config.js', {\n    plugins: [\n        `'@babel/plugin-transform-runtime'`,\n        `'@babel/plugin-proposal-class-properties'`,\n        `'@babel/plugin-proposal-export-default-from'`,\n        `'@babel/plugin-proposal-optional-chaining'`\n    ],\n    presets: [`'@babel/preset-env'`, `'babel-preset-minify'`]\n});\n/**\n * Create and edit an ESLint configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * await (new EslintConfigModuleEditor())\n *     .create()\n *     .commit();\n */\nexport const EslintConfigModuleEditor = createModuleEditor('.eslintrc.js', {\n    env: {\n        es6: true,\n        jest: true\n    },\n    extends: [\n        `'omaha-prime-grade'`\n    ],\n    parser: `'babel-eslint'`\n});\n/**\n * Create and edit a package.json manifest file with a fluent API\n * @type {JsonEditor}\n * @example <caption>Create a new package.json</caption>\n * await (new PackageJsonEditor())\n *     .create()\n *     .commit();\n * @example <caption>Create a new package.json and read its contents (chaining OK)</caption>\n * const contents = (new PackageJsonEditor())\n *     .create()\n *     .read();\n * @example <caption>Extend a package.json</caption>\n * const script = {test: 'jest --coverage'};\n * await (new PackageJsonEditor())\n *     .extend({script})\n *     .commit();\n * @example <caption>Create and extend a package.json without writing to disk (chaining OK)</caption>\n * const script = {\n *     lint: 'eslint index.js -c ./.eslintrc.js'\n * };\n * await (new PackageJsonEditor())\n *     .create(false)\n *     .extend({script}, false)\n *     .commit();\n */\nexport const PackageJsonEditor = createJsonEditor('package.json', {\n    name: 'my-project',\n    version: '0.0.0',\n    description: 'A super cool app/server/tool/library/widget/thingy',\n    license: 'MIT',\n    keywords: []\n});\nexport const BsConfigJsonEditor = createJsonEditor('bsconfig.json', {\n    'bs-dependencies': ['reason-react'],\n    'bsc-flags': ['-bs-super-errors'],\n    namespace: true,\n    'package-specs': [{\n        module: 'es6',\n        'in-source': true\n    }],\n    'ppx-flags': [],\n    reason: {'react-jsx': 3},\n    refmt: 3,\n    sources: [{\n        dir: 'src',\n        subdirs: true\n    }],\n    suffix: '.bs.js'\n});\n/**\n * Create and edit a PostCSS configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * await (new PostcssConfigEditor())\n *     .create()\n *     .commit();\n */\nexport const PostcssConfigEditor = createModuleEditor('postcss.config.js', {\n    map: true,\n    parser: `require('postcss-safe-parser')`\n});\n/**\n * Create and edit a PurgeCSS configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * await (new PurgecssConfigEditor())\n *     .create()\n *     .commit();\n */\nexport const PurgecssConfigEditor = createModuleEditor('purgecss.config.js', {\n    content: [`'./assets/index.html'`]\n});\n/**\n * Create and edit a Rollup configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * await (new RollupConfigEditor())\n *     .create()\n *     .commit();\n */\nexport const RollupConfigEditor = createModuleEditor('rollup.config.js', {\n    input: `'./src/main.js'`,\n    output: {\n        file: `'./dist/bundle.min.js'`,\n        format: `'iife'`,\n        sourceMap: `'inline'`\n    },\n    plugins: [\n        `babel({exclude: 'node_modules/**', runtimeHelpers: true})`,\n        oneLineTrim`commonjs({\n            namedExports: {\n                './node_modules/backbone/backbone.js': ['Model', 'history'],\n                './node_modules/backbone.marionette/lib/backbone.marionette.js': ['Application', 'View', 'MnObject']\n            }\n        })`,\n        `resolve({browser: true})`,\n        `replace({'process.env.NODE_ENV': JSON.stringify('production')})`,\n        `terser()`\n    ]\n}, {esm: true});\n/**\n * Create and edit a Webpack configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * await (new WebpackConfigEditor())\n *     .create()\n *     .commit();\n */\nexport const WebpackConfigEditor = createFunctionModuleEditor('webpack.config.js', {\n    mode: `argv.mode === 'production' ? 'production' : 'development'`,\n    entry: {\n        app: `'./src/main.js'`\n    },\n    devtool: `(argv.mode === 'production') ? void 0 : 'eval-source-map'`,\n    output: {\n        path: `resolve('./dist')`,\n        filename: `'bundle.min.js'`\n    }\n}, {params: ['env', 'argv']});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/src/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 266,
    "kind": "variable",
    "name": "assign",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~assign",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 267,
    "kind": "variable",
    "name": "isArray",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~isArray",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 268,
    "kind": "function",
    "name": "isUniqueTask",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~isUniqueTask",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{isUniqueTask}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"text\": *}"
        ],
        "defaultRaw": {
          "text": null
        },
        "defaultValue": "{\"text\":null}"
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "tasks",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "function",
    "name": "isValidTask",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~isValidTask",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{isValidTask}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "withOptions",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~withOptions",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{withOptions}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 271,
    "kind": "function",
    "name": "choose",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~choose",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{choose}",
    "description": "Choose tasks based on CLI options",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "choices",
        "description": "Object to create choice dictionary from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "Accepts CLI options and returns array of tasks"
    }
  },
  {
    "__docId__": 272,
    "kind": "function",
    "name": "getIntendedInput",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~getIntendedInput",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{getIntendedInput}",
    "description": "Use string-similarity module to determine closest matching string",
    "examples": [
      "const [intendedCommand, intendedTerms] = getIntendedInput(commands, command, terms);"
    ],
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "commands",
        "description": "Object with commands as key values, terms as key values for each command object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "Command string input"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "terms",
        "description": "Terms input"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "[intendedCommand, intendedTerms] Array destructed assignment is recommended (see example)"
    }
  },
  {
    "__docId__": 273,
    "kind": "function",
    "name": "getVersions",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils/index.js~getVersions",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{getVersions}",
    "description": "Use npm CLI to return array of module versions",
    "examples": [
      "const versions = getVersions('react');"
    ],
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "npm module name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "Array of versions"
    }
  },
  {
    "__docId__": 274,
    "kind": "function",
    "name": "install",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils/index.js~install",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{install}",
    "description": "Install dependencies with npm",
    "examples": [
      "<caption>Install production dependencies</caption>\ninstall(['react']);",
      "<caption>Install development dependencies</caption>\ninstall(['jest', 'babel-jest'], {dev: true});"
    ],
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "dependencies",
        "description": "Modules to install"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options to configure installation"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.dev",
        "description": "If true, add \"--save-dev\""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.latest",
        "description": "If true, add \"@latest\" to all module names"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.skipInstall",
        "description": "Do not install (mostly for testing)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "Array of inputs (mostly for testing)"
    }
  },
  {
    "__docId__": 275,
    "kind": "function",
    "name": "uninstall",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils/index.js~uninstall",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{uninstall}",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "dependencies",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "function",
    "name": "populateQueue",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils/index.js~populateQueue",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{populateQueue}",
    "description": "Add async tasks to a queue, handle completion with actions dispatched via dispatch function",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data to be used for populating queue"
      },
      {
        "nullable": null,
        "types": [
          "Queue"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "data.queue",
        "description": "p-queue instance"
      },
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "data.tasks",
        "description": "Array of task objects"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "data.dispatch",
        "description": "Function to dispatch task completion (complete, skip, error) actions"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "data.options",
        "description": "Options object to pass to task function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": "Returns nothing (side effects only)"
    }
  },
  {
    "__docId__": 277,
    "kind": "variable",
    "name": "BabelConfigModuleEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~BabelConfigModuleEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{BabelConfigModuleEditor}",
    "description": "Create and edit a Babel.js configuration file with a fluent API",
    "examples": [
      "<caption>Extend module.exports content and prepend text to the top of the file</caption>\nawait (new BabelConfigModuleEditor())\n    .create()\n    .extend({presets: [`'@babel/preset-env'`]})\n    .prepend(`const {existsSync} = require('fs-extra');`)\n    .commit();"
    ],
    "lineNumber": 149,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 278,
    "kind": "variable",
    "name": "EslintConfigModuleEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~EslintConfigModuleEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{EslintConfigModuleEditor}",
    "description": "Create and edit an ESLint configuration file with a fluent API",
    "examples": [
      "await (new EslintConfigModuleEditor())\n    .create()\n    .commit();"
    ],
    "lineNumber": 166,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 279,
    "kind": "variable",
    "name": "PackageJsonEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~PackageJsonEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{PackageJsonEditor}",
    "description": "Create and edit a package.json manifest file with a fluent API",
    "examples": [
      "<caption>Create a new package.json</caption>\nawait (new PackageJsonEditor())\n    .create()\n    .commit();",
      "<caption>Create a new package.json and read its contents (chaining OK)</caption>\nconst contents = (new PackageJsonEditor())\n    .create()\n    .read();",
      "<caption>Extend a package.json</caption>\nconst script = {test: 'jest --coverage'};\nawait (new PackageJsonEditor())\n    .extend({script})\n    .commit();",
      "<caption>Create and extend a package.json without writing to disk (chaining OK)</caption>\nconst script = {\n    lint: 'eslint index.js -c ./.eslintrc.js'\n};\nawait (new PackageJsonEditor())\n    .create(false)\n    .extend({script}, false)\n    .commit();"
    ],
    "lineNumber": 201,
    "type": {
      "nullable": null,
      "types": [
        "JsonEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 280,
    "kind": "variable",
    "name": "BsConfigJsonEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~BsConfigJsonEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{BsConfigJsonEditor}",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "variable",
    "name": "PostcssConfigEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~PostcssConfigEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{PostcssConfigEditor}",
    "description": "Create and edit a PostCSS configuration file with a fluent API",
    "examples": [
      "await (new PostcssConfigEditor())\n    .create()\n    .commit();"
    ],
    "lineNumber": 233,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 282,
    "kind": "variable",
    "name": "PurgecssConfigEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~PurgecssConfigEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{PurgecssConfigEditor}",
    "description": "Create and edit a PurgeCSS configuration file with a fluent API",
    "examples": [
      "await (new PurgecssConfigEditor())\n    .create()\n    .commit();"
    ],
    "lineNumber": 245,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 283,
    "kind": "variable",
    "name": "RollupConfigEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~RollupConfigEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{RollupConfigEditor}",
    "description": "Create and edit a Rollup configuration file with a fluent API",
    "examples": [
      "await (new RollupConfigEditor())\n    .create()\n    .commit();"
    ],
    "lineNumber": 256,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "name": "WebpackConfigEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~WebpackConfigEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{WebpackConfigEditor}",
    "description": "Create and edit a Webpack configuration file with a fluent API",
    "examples": [
      "await (new WebpackConfigEditor())\n    .create()\n    .commit();"
    ],
    "lineNumber": 284,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "index",
    "content": "<div align=\"center\">\n    <img id=\"logo\" src=\"https://raw.githubusercontent.com/jhwohlgemuth/tomo-cli/master/resources/tomo-logo.png\" width=\"350px\"/>\n</div>\n<br />\n<div align=\"center\">\n    <a href=\"https://www.npmjs.com/package/tomo-cli\"><img alt=\"Module Version\" src=\"https://img.shields.io/npm/v/tomo-cli?style=for-the-badge\" /></a>\n    <a href=\"https://travis-ci.org/jhwohlgemuth/tomo-cli\"><img alt=\"Build Status\" src=\"https://img.shields.io/travis/jhwohlgemuth/tomo-cli.svg?logo=travis&style=for-the-badge\" /></a>\n    <a href=\"https://codecov.io/gh/jhwohlgemuth/tomo-cli\"><img alt=\"Code Coverage\" src=\"https://img.shields.io/codecov/c/github/jhwohlgemuth/tomo-cli.svg?logo=codecov&style=for-the-badge\" /></a>\n</div>\n\n# tomo\n\n> A friendly command line tool designed to help create sustainable software using web technology\n\n*It's like* [create-react-app](https://github.com/facebook/create-react-app/), but with less complexity and more flexibility (tomo even has \"out of the box\" support for HMR using Webpack or [Parcel](https://github.com/jhwohlgemuth/tomo-cli#create-a-new-app-using-react-and-parcel-with-blazing-fast-hmr))\n\n*It's like* [yeoman](https://yeoman.io/)+[generator](https://yeoman.io/generators/), but with a bespoke interface written with the [React API](https://github.com/vadimdemedes/ink) that focuses on [User Experience (UX)](https://github.com/jhwohlgemuth/tomo-cli#made-a-mistake-while-typing-tomo-has-your-back-). tomo can also be used to [progressively enhance existing projects!](https://github.com/jhwohlgemuth/tomo-cli#add-eslint-to-your-project)\n\n*It's like* [GatsbyJS](https://www.gatsbyjs.org/), but can be used to make and enhance modules, libraries, plugins, apps, sites, servers, and more.\n\n*It's like* [mrm](https://github.com/sapegin/mrm), but with mostly different options, built with a React-based UI, and focused more on code, less on config. Honestly, `mrm` is really cool... `tomo` and `mrm` could definitely be used together.\n\n*It's like* boilerplate from GitHub, but with a streamlined interface designed to be user friendly (and all of the stuff above too)\n\n(see the wiki for [my full list of alternatives/inspirations](https://github.com/jhwohlgemuth/tomo-cli/wiki/Alternatives))\n\n## Install\n\n```\n$ npm install --global tomo-cli\n$ tomo [command] [terms] [options]\n```\n\n## No install\n\n```\n$ npx tomo-cli [command] [terms] [options]\n```\n\n## Install and Deploy\n> tomo web apps work with [surge.sh](https://surge.sh/) and [now.sh](https://zeit.co/download) out of the box!\n\n1. [Install tomo-cli](https://github.com/jhwohlgemuth/tomo-cli#install)\n2. Install surge or now CLI\n3. Scaffold a web app:\n    ```shell\n    tomo new app [options]\n    ```\n4. Update `deploy` task in `package.json` (pick surge or now):\n    ```json\n    {\n        \"deploy\": \"surge dist\"\n    }\n    ```\n    ```json\n    {\n        \"deploy\": \"now dist\"\n    }\n5. Excecute deploy script:\n    ```shell\n    npm run deploy\n    ```\n\n## No Install and Deploy\n> Quickly see the results of `tomo new server`... live ... on [Heroku]()\n\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)\n\n## Usage\n\n> tomo wants to help you explore and exploit modern web technologies. With a strong focus on Developer Experience (DX), tomo will allow you to build new stuff and augment existing stuff. \"No [FOMO](https://en.wikipedia.org/wiki/Fear_of_missing_out) with tomo!\"™\n\n#### Create a new app with [Marionette.js](https://marionettejs.com/) and [Webpack](https://webpack.js.org/)\n\n<div align=\"center\">\n    <img class=\"gif\" src=\"https://raw.githubusercontent.com/jhwohlgemuth/tomo-cli/master/resources/tomo-new-app.gif\"/>\n</div>\n\n#### Create a new app using [React](https://reactjs.org/) and [Parcel](https://parceljs.org/) (with blazing fast [HMR](https://parceljs.org/hmr.html))\n\n<div align=\"center\">\n    <img class=\"gif\" src=\"https://raw.githubusercontent.com/jhwohlgemuth/tomo-cli/master/resources/tomo-new-app--use-react--use-parcel.gif\"/>\n</div>\n\n#### Add [ESLint](https://eslint.org/) to your project\n\n<div align=\"center\">\n    <img class=\"gif\" src=\"https://raw.githubusercontent.com/jhwohlgemuth/tomo-cli/master/resources/tomo-add-eslint.gif\"/>\n</div>\n\n#### Select what you want to add via the tomo CLI \"add\" menu\n\n<div align=\"center\">\n    <img class=\"gif\" src=\"https://raw.githubusercontent.com/jhwohlgemuth/tomo-cli/master/resources/tomo-add.gif\"/>\n</div>\n\n#### Replace [Webpack](https://webpack.js.org/) with [Rollup](https://rollupjs.org/guide/en/)\n\n<div align=\"center\">\n    <img class=\"gif\" src=\"https://raw.githubusercontent.com/jhwohlgemuth/tomo-cli/master/resources/tomo-replace-webpack-with-rollup.gif\"/>\n</div>\n\n#### Made a mistake while typing? tomo has your back ;)\n\n<div align=\"center\">\n    <img class=\"gif\" src=\"https://raw.githubusercontent.com/jhwohlgemuth/tomo-cli/master/resources/tomo-oops.gif\"/>\n</div>\n\n\n### Read the help! So exciting!\n\n```bash\n$ tomo --help\n\n  Usage\n\n    tomo [commands] [terms] [options]\n\n\n  Commands\n\n    new, add, remove, version\n\n\n  Terms\n\n    [new]\n    project, app, server\n\n    [add]\n    a11y, babel, browsersync, cypress, electron, esdoc, eslint, jest,\n    marionette, makefile, parcel, postcss, react, reason, rollup, webpack\n\n    [remove]\n    a11y, browsersync, cypress, parcel, postcss, reason, rollup, webpack\n   \n\n  Options\n\n    --version, -v           Print version\n    --source-directory, -d  Directory for source code [Default: ./src]\n    --output-directory, -o  Directory for build targets [Default: ./dist]\n    --assets-directory, -a  Directory for assets [Default: ./assets]\n    --use-rollup,           Use Rollup instead of Webpack [Default: false]\n    --use-parcel,           Use Parcel instead of Webpack [Default: false]\n    --use-react, -r         Add React support to workflow [Default: false]\n    --react-version         React version for ESLint configuration [Default: '16.8']\n    --with-cesium           Add CesiumJS to your project [Default: false]\n    --ignore-warnings, -i   Ignore warning messages [Default: false]\n    --skip-install, -s      Skip npm installations [Default: false]\n    --overwrite             Copy files, even if they alrady exist [Default: false]\n    --browser               Indicate tasks are intended for the browser [Default: false]\n    --port, -p              Configure port for workflow tasks that use it [Default: 4669]\n    --debug                 Show debug data [Default: false]\n\n```\n\n## BTW\n> **tomo** means [\"friend\" in Japanese (友)](https://translate.google.com/#view=home&op=translate&sl=ja&tl=en&text=%E5%8F%8B)\n\n## License\n\nMIT © [Jason Wohlgemuth](https://twitter.com/jhwohlgemuth)\n\n<a href=\"https://app.fossa.com/projects/git%2Bgithub.com%2Fjhwohlgemuth%2Ftomo-cli?ref=badge_large\" alt=\"FOSSA Status\"><img src=\"https://app.fossa.com/api/projects/git%2Bgithub.com%2Fjhwohlgemuth%2Ftomo-cli.svg?type=large\"/></a>\n",
    "longname": "/Users/jason/dev/tomo-cli/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"tomo-cli\",\n  \"version\": \"1.0.4\",\n  \"description\": \"A friendly command line tool designed to help create sustainable software using web technology\",\n  \"license\": \"MIT\",\n  \"main\": \"dist/api.js\",\n  \"bin\": {\n    \"tomo\": \"dist/index.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/jhwohlgemuth/tomo-cli.git\"\n  },\n  \"author\": \"Jason Wohlgemuth <jhwohlgemuth@gmail.com> (omaha.js.org)\",\n  \"engines\": {\n    \"node\": \">=6\"\n  },\n  \"scripts\": {\n    \"copy:assets\": \"cpy '**/templates/*.(js|json|re|html|hbs|css|md|png|ico|otf|svg|woff|woff2|ttf|eot|cert|key)' '**/[.]*' '../dist/' --cwd=src --parents --recursive\",\n    \"dev\": \"stmux [ \\\"npm run build:watch\\\" : \\\"npm run lint:watch\\\" ]\",\n    \"prebuild\": \"npm run build:clean\",\n    \"build\": \"babel src --out-dir dist\",\n    \"postbuild\": \"npm run copy:assets\",\n    \"build:clean\": \"rm -frd ./dist\",\n    \"build:watch\": \"watch 'npm run build' ./src\",\n    \"build:docs\": \"esdoc -c ./esdoc.conf.json\",\n    \"test\": \"jest .*.test.js --coverage\",\n    \"test:e2e\": \"jest .*.e2e.js\",\n    \"test:ing\": \"npm test -- --watchAll\",\n    \"open:coverage\": \"open-cli ./coverage/lcov-report/index.html\",\n    \"open:docs\": \"open-cli ./docs/index.html\",\n    \"lint\": \"eslint . -c ./.eslintrc.js --fix\",\n    \"lint:watch\": \"watch 'npm run lint' ./src\",\n    \"lint:tests\": \"eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore\",\n    \"lint:tests:watch\": \"watch 'npm run lint:tests' ./__tests__\",\n    \"lint:config\": \"eslint -c ./.eslintrc.js *.js --fix\",\n    \"lint:docs\": \"eslint src/*.js src/**/*.js --no-eslintrc --rule valid-jsdoc:error --parser babel-eslint\",\n    \"lint:all\": \"npm-run-all lint lint:tests lint:docs\",\n    \"predocs\": \"npm run lint:docs\",\n    \"docs\": \"npm run build:docs\",\n    \"postdocs\": \"npm run open:docs\",\n    \"preversion\": \"npm-run-all lint build test\",\n    \"postversion\": \"git push && git push --tags\",\n    \"prerelease\": \"npm run preversion\",\n    \"release\": \"release\"\n  },\n  \"jest\": {\n    \"testMatch\": [\n      \"**/__tests__/**/*.(e2e|test).[jt]s?(x)\"\n    ],\n    \"testPathIgnorePatterns\": [\n      \"/__tests__/fixtures\"\n    ],\n    \"watchPlugins\": [\n      \"jest-watch-typeahead/filename\",\n      \"jest-watch-typeahead/testname\"\n    ]\n  },\n  \"keywords\": [],\n  \"dependencies\": {\n    \"@babel/runtime\": \"7.6.0\",\n    \"cardinal\": \"^2.1.1\",\n    \"chalk\": \"2.4.2\",\n    \"common-tags\": \"^1.8.0\",\n    \"core-js\": \"^3.1.4\",\n    \"delay\": \"4.3.0\",\n    \"execa\": \"2.0.4\",\n    \"figures\": \"3.0.0\",\n    \"fs-extra\": \"8.1.0\",\n    \"get-stdin\": \"^7.0.0\",\n    \"ink\": \"2.3.0\",\n    \"ink-big-text\": \"1.0.1\",\n    \"ink-box\": \"1.0.0\",\n    \"ink-select-input\": \"3.1.2\",\n    \"ink-spinner\": \"3.0.1\",\n    \"is-online\": \"^8.2.0\",\n    \"lodash.merge\": \"^4.6.2\",\n    \"mem-fs\": \"1.1.3\",\n    \"mem-fs-editor\": \"6.0.0\",\n    \"meow\": \"5.0.0\",\n    \"p-queue\": \"6.1.1\",\n    \"pino\": \"^5.12.3\",\n    \"pino-pretty\": \"^3.0.0\",\n    \"prettier\": \"1.18.2\",\n    \"prop-types\": \"15.7.2\",\n    \"ramda\": \"^0.26.1\",\n    \"react\": \"16.9.0\",\n    \"read-pkg\": \"^5.1.1\",\n    \"semver\": \"6.3.0\",\n    \"string-similarity\": \"3.0.0\",\n    \"update-notifier\": \"3.0.1\",\n    \"validate-npm-package-name\": \"^3.0.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"7.6.0\",\n    \"@babel/core\": \"7.6.0\",\n    \"@babel/plugin-proposal-class-properties\": \"7.5.5\",\n    \"@babel/plugin-proposal-export-default-from\": \"7.5.2\",\n    \"@babel/plugin-proposal-optional-chaining\": \"7.6.0\",\n    \"@babel/plugin-proposal-pipeline-operator\": \"7.5.0\",\n    \"@babel/plugin-transform-runtime\": \"7.6.0\",\n    \"@babel/preset-env\": \"7.6.0\",\n    \"@babel/preset-react\": \"7.0.0\",\n    \"babel-eslint\": \"10.0.3\",\n    \"babel-jest\": \"24.9.0\",\n    \"babel-plugin-ramda\": \"2.0.0\",\n    \"babel-preset-minify\": \"0.5.1\",\n    \"cpy-cli\": \"2.0.0\",\n    \"directory-tree\": \"2.2.4\",\n    \"esdoc\": \"1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"1.0.0\",\n    \"esdoc-inject-style-plugin\": \"1.0.0\",\n    \"esdoc-jsx-plugin\": \"1.0.0\",\n    \"esdoc-standard-plugin\": \"1.0.0\",\n    \"eslint\": \"6.3.0\",\n    \"eslint-config-omaha-prime-grade\": \"11.0.4\",\n    \"eslint-plugin-react\": \"7.14.3\",\n    \"ink-testing-library\": \"1.0.2\",\n    \"jest\": \"24.9.0\",\n    \"jest-watch-typeahead\": \"0.4.0\",\n    \"npm-run-all\": \"4.1.5\",\n    \"open-cli\": \"5.0.0\",\n    \"release\": \"6.1.0\",\n    \"rimraf\": \"3.0.0\",\n    \"stmux\": \"1.7.1\",\n    \"watch\": \"1.0.2\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/jhwohlgemuth/tomo-cli/issues\"\n  },\n  \"homepage\": \"https://github.com/jhwohlgemuth/tomo-cli#readme\"\n}\n",
    "longname": "/Users/jason/dev/tomo-cli/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 285,
    "kind": "testFile",
    "name": "__tests__/api.test.js",
    "content": "import api from '../src/api';\n\ndescribe('API', () => {\n    test('exports utils', () => {\n        expect(Object.keys(api)).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/api.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "__tests__/api.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/api.test.js~describe0",
    "access": null,
    "description": "API",
    "lineNumber": 3
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "test1",
    "testId": 1,
    "memberof": "__tests__/api.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/api.test.js~describe0.test1",
    "access": null,
    "description": "exports utils",
    "lineNumber": 4
  },
  {
    "__docId__": 288,
    "kind": "testFile",
    "name": "__tests__/commands-a11y.test.js",
    "content": "import {fileContents, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport {addA11y, removeA11y} from '../src/commands/add-a11y';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Accessibility', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addA11y, {skipInstall});\n        const pkg = fileContents('package.json');\n        expect(pkg).toMatchSnapshot();\n    });\n    test('Remove support', async () => {\n        await run(createPackageJson, {});\n        await run(addA11y, {skipInstall});\n        await run(removeA11y, {skipInstall});\n        const pkg = fileContents('package.json');\n        expect(pkg).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-a11y.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "describe2",
    "testId": 2,
    "memberof": "__tests__/commands-a11y.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-a11y.test.js~describe2",
    "access": null,
    "description": "Accessibility",
    "lineNumber": 7
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "test3",
    "testId": 3,
    "memberof": "__tests__/commands-a11y.test.js~describe2",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-a11y.test.js~describe2.test3",
    "access": null,
    "description": "Add support",
    "lineNumber": 18
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "test4",
    "testId": 4,
    "memberof": "__tests__/commands-a11y.test.js~describe2",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-a11y.test.js~describe2.test4",
    "access": null,
    "description": "Remove support",
    "lineNumber": 24
  },
  {
    "__docId__": 292,
    "kind": "testFile",
    "name": "__tests__/commands-babel.test.js",
    "content": "import {fileContents, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport addBabel from '../src/commands/add-babel';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Babel', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const useReact = true;\n    const useRollup = true;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addBabel, {skipInstall});\n        const pkg = fileContents('./package.json');\n        const babelConfig = fileContents('./babel.config.js');\n        expect(pkg).toMatchSnapshot();\n        expect(babelConfig).toMatchSnapshot();\n    });\n    test('Add support (+React)', async () => {\n        await run(createPackageJson, {});\n        await run(addBabel, {skipInstall, useReact});\n        const babelConfig = fileContents('./babel.config.js');\n        expect(babelConfig).toMatchSnapshot();\n    });\n    test('Add support (+React+Rollup)', async () => {\n        await run(createPackageJson, {});\n        await run(addBabel, {skipInstall, useReact, useRollup});\n        const babelConfig = fileContents('./babel.config.js');\n        expect(babelConfig).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-babel.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "__tests__/commands-babel.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-babel.test.js~describe5",
    "access": null,
    "description": "Babel",
    "lineNumber": 7
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "test6",
    "testId": 6,
    "memberof": "__tests__/commands-babel.test.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-babel.test.js~describe5.test6",
    "access": null,
    "description": "Add support",
    "lineNumber": 20
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "test7",
    "testId": 7,
    "memberof": "__tests__/commands-babel.test.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-babel.test.js~describe5.test7",
    "access": null,
    "description": "Add support (+React)",
    "lineNumber": 28
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "test8",
    "testId": 8,
    "memberof": "__tests__/commands-babel.test.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-babel.test.js~describe5.test8",
    "access": null,
    "description": "Add support (+React+Rollup)",
    "lineNumber": 34
  },
  {
    "__docId__": 297,
    "kind": "testFile",
    "name": "__tests__/commands-browsersync.test.js",
    "content": "import {fileContents, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport {addPostcss} from '../src/commands/add-postcss';\nimport {addWebpack} from '../src/commands/add-webpack';\nimport {addBrowsersync, removeBrowsersync} from '../src/commands/add-browsersync';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Browsersync', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addBrowsersync, {skipInstall});\n        const noop = fileContents('./package.json');\n        await run(addWebpack, {skipInstall});\n        await run(addPostcss, {skipInstall});\n        await run(addBrowsersync, {skipInstall});\n        const packageJson = fileContents('./package.json');\n        expect(noop).toMatchSnapshot();\n        expect(packageJson).toMatchSnapshot();\n    });\n    test('Remove support', async () => {\n        await run(createPackageJson, {});\n        await run(addWebpack, {skipInstall});\n        await run(addPostcss, {skipInstall});\n        await run(addBrowsersync, {skipInstall});\n        await run(removeBrowsersync, {skipInstall});\n        const packageJson = fileContents('./package.json');\n        expect(packageJson).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-browsersync.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "__tests__/commands-browsersync.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-browsersync.test.js~describe9",
    "access": null,
    "description": "Browsersync",
    "lineNumber": 9
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "test10",
    "testId": 10,
    "memberof": "__tests__/commands-browsersync.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-browsersync.test.js~describe9.test10",
    "access": null,
    "description": "Add support",
    "lineNumber": 20
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "test11",
    "testId": 11,
    "memberof": "__tests__/commands-browsersync.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-browsersync.test.js~describe9.test11",
    "access": null,
    "description": "Remove support",
    "lineNumber": 31
  },
  {
    "__docId__": 301,
    "kind": "testFile",
    "name": "__tests__/commands-create.test.js",
    "content": "import {fileContents, getDirectoryTree, run, useTemporaryDirectory} from './tomo-test';\nimport commands from '../src/commands';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Create', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const useReact = true;\n    const reactVersion = '16.2';\n    const {create} = commands;\n    const omit = ['extension', 'path', 'size', 'type'];\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('new project', async () => {\n        await run(create.project, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const config = fileContents('./.editorconfig');\n        expect(tree).toMatchSnapshot();\n        expect(config).toMatchSnapshot();\n    });\n    test('new app', async () => {\n        await run(create.app, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('./package.json');\n        const cfg = fileContents('./.eslintrc.js');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n        expect(cfg).toMatchSnapshot();\n    });\n    test('new react app', async () => {\n        const options = {reactVersion, skipInstall, useReact};\n        await run(create.app, options);\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('./package.json');\n        const cfg = fileContents('./.eslintrc.js');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n        expect(cfg).toMatchSnapshot();\n    });\n    test('new server', async () => {\n        await run(create.server, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('./package.json');\n        const cfg = fileContents('./.eslintrc.js');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n        expect(cfg).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-create.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "__tests__/commands-create.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-create.test.js~describe12",
    "access": null,
    "description": "Create",
    "lineNumber": 6
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "test13",
    "testId": 13,
    "memberof": "__tests__/commands-create.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-create.test.js~describe12.test13",
    "access": null,
    "description": "new project",
    "lineNumber": 21
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "test14",
    "testId": 14,
    "memberof": "__tests__/commands-create.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-create.test.js~describe12.test14",
    "access": null,
    "description": "new app",
    "lineNumber": 28
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "test15",
    "testId": 15,
    "memberof": "__tests__/commands-create.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-create.test.js~describe12.test15",
    "access": null,
    "description": "new react app",
    "lineNumber": 37
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "test16",
    "testId": 16,
    "memberof": "__tests__/commands-create.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-create.test.js~describe12.test16",
    "access": null,
    "description": "new server",
    "lineNumber": 47
  },
  {
    "__docId__": 307,
    "kind": "testFile",
    "name": "__tests__/commands-cypress.test.js",
    "content": "import {fileContents, getDirectoryTree, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport addEslint from '../src/commands/add-eslint';\nimport {addCypress, removeCypress} from '../src/commands/add-cypress';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Cypress', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const omit = ['extension', 'path', 'size', 'type'];\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addEslint, {skipInstall});\n        await run(addCypress, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const packageJson = fileContents('package.json');\n        const cypressConfig = fileContents('cypress.json');\n        const eslintConfig = fileContents('.eslintrc.js');\n        expect(tree).toMatchSnapshot();\n        expect(packageJson).toMatchSnapshot();\n        expect(cypressConfig).toMatchSnapshot();\n        expect(eslintConfig).toMatchSnapshot();\n    });\n    test('Remove support', async () => {\n        await run(createPackageJson, {});\n        await run(addEslint, {skipInstall});\n        await run(addCypress, {skipInstall});\n        await run(removeCypress, {});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const packageJson = fileContents('package.json');\n        const eslintConfig = fileContents('.eslintrc.js');\n        expect(tree).toMatchSnapshot();\n        expect(packageJson).toMatchSnapshot();\n        expect(eslintConfig).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-cypress.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "__tests__/commands-cypress.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-cypress.test.js~describe17",
    "access": null,
    "description": "Cypress",
    "lineNumber": 8
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "test18",
    "testId": 18,
    "memberof": "__tests__/commands-cypress.test.js~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-cypress.test.js~describe17.test18",
    "access": null,
    "description": "Add support",
    "lineNumber": 20
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "test19",
    "testId": 19,
    "memberof": "__tests__/commands-cypress.test.js~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-cypress.test.js~describe17.test19",
    "access": null,
    "description": "Remove support",
    "lineNumber": 33
  },
  {
    "__docId__": 311,
    "kind": "testFile",
    "name": "__tests__/commands-electron.test.js",
    "content": "import {fileContents, getDirectoryTree, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport addElectron from '../src/commands/add-electron';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Electron', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const useParcel = true;\n    const omit = ['extension', 'path', 'size', 'type'];\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addElectron, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('package.json');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n    });\n    test('Add support (+Parcel)', async () => {\n        await run(createPackageJson, {});\n        await run(addElectron, {skipInstall, useParcel});\n        const pkg = fileContents('package.json');\n        expect(pkg).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-electron.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "describe20",
    "testId": 20,
    "memberof": "__tests__/commands-electron.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-electron.test.js~describe20",
    "access": null,
    "description": "Electron",
    "lineNumber": 7
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "test21",
    "testId": 21,
    "memberof": "__tests__/commands-electron.test.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-electron.test.js~describe20.test21",
    "access": null,
    "description": "Add support",
    "lineNumber": 20
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "test22",
    "testId": 22,
    "memberof": "__tests__/commands-electron.test.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-electron.test.js~describe20.test22",
    "access": null,
    "description": "Add support (+Parcel)",
    "lineNumber": 28
  },
  {
    "__docId__": 315,
    "kind": "testFile",
    "name": "__tests__/commands-esdoc.test.js",
    "content": "import {fileContents, getDirectoryTree, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport addEsdoc from '../src/commands/add-esdoc';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('ESDoc', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const useReact = true;\n    const omit = ['extension', 'path', 'size', 'type'];\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addEsdoc, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('./package.json');\n        const esdocConfig = fileContents('./esdoc.conf.json');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n        expect(esdocConfig).toMatchSnapshot();\n    });\n    test('Add support (+React)', async () => {\n        await run(createPackageJson, {});\n        await run(addEsdoc, {skipInstall, useReact});\n        const esdocConfig = fileContents('./esdoc.conf.json');\n        expect(esdocConfig).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-esdoc.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "__tests__/commands-esdoc.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-esdoc.test.js~describe23",
    "access": null,
    "description": "ESDoc",
    "lineNumber": 7
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "test24",
    "testId": 24,
    "memberof": "__tests__/commands-esdoc.test.js~describe23",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-esdoc.test.js~describe23.test24",
    "access": null,
    "description": "Add support",
    "lineNumber": 20
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "test25",
    "testId": 25,
    "memberof": "__tests__/commands-esdoc.test.js~describe23",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-esdoc.test.js~describe23.test25",
    "access": null,
    "description": "Add support (+React)",
    "lineNumber": 30
  },
  {
    "__docId__": 319,
    "kind": "testFile",
    "name": "__tests__/commands-eslint.test.js",
    "content": "import {fileContents, getDirectoryTree, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport addEslint from '../src/commands/add-eslint';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('ESLint', () => {\n    let tempDirectory;\n    const browser = true;\n    const skipInstall = true;\n    const useReact = true;\n    const reactVersion = '16.8';\n    const omit = ['extension', 'path', 'size', 'type'];\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addEslint, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('./package.json');\n        const eslintConfig = fileContents('./.eslintrc.js');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n        expect(eslintConfig).toMatchSnapshot();\n    });\n    test('Add support (+Browser)', async () => {\n        await run(createPackageJson, {});\n        await run(addEslint, {skipInstall, browser});\n        const eslintConfig = fileContents('./.eslintrc.js');\n        expect(eslintConfig).toMatchSnapshot();\n    });\n    test('Add support (+Browser+React)', async () => {\n        await run(createPackageJson, {});\n        await run(addEslint, {skipInstall, browser, useReact, reactVersion});\n        const eslintConfig = fileContents('./.eslintrc.js');\n        expect(eslintConfig).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-eslint.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "__tests__/commands-eslint.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-eslint.test.js~describe26",
    "access": null,
    "description": "ESLint",
    "lineNumber": 7
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "test27",
    "testId": 27,
    "memberof": "__tests__/commands-eslint.test.js~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-eslint.test.js~describe26.test27",
    "access": null,
    "description": "Add support",
    "lineNumber": 22
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "test28",
    "testId": 28,
    "memberof": "__tests__/commands-eslint.test.js~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-eslint.test.js~describe26.test28",
    "access": null,
    "description": "Add support (+Browser)",
    "lineNumber": 32
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "test29",
    "testId": 29,
    "memberof": "__tests__/commands-eslint.test.js~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-eslint.test.js~describe26.test29",
    "access": null,
    "description": "Add support (+Browser+React)",
    "lineNumber": 38
  },
  {
    "__docId__": 324,
    "kind": "testFile",
    "name": "__tests__/commands-jest.test.js",
    "content": "import {fileContents, getDirectoryTree, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport addJest from '../src/commands/add-jest';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Jest', () => {\n    let tempDirectory;\n    const browser = true;\n    const skipInstall = true;\n    const omit = ['extension', 'path', 'size', 'type'];\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addJest, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('./package.json');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n    });\n    test('Add support (+Browser)', async () => {\n        await run(createPackageJson, {});\n        await run(addJest, {browser, skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('./package.json');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-jest.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "__tests__/commands-jest.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-jest.test.js~describe30",
    "access": null,
    "description": "Jest",
    "lineNumber": 7
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "test31",
    "testId": 31,
    "memberof": "__tests__/commands-jest.test.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-jest.test.js~describe30.test31",
    "access": null,
    "description": "Add support",
    "lineNumber": 20
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "test32",
    "testId": 32,
    "memberof": "__tests__/commands-jest.test.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-jest.test.js~describe30.test32",
    "access": null,
    "description": "Add support (+Browser)",
    "lineNumber": 28
  },
  {
    "__docId__": 328,
    "kind": "testFile",
    "name": "__tests__/commands-makefile.test.js",
    "content": "import {readMakefileContent, run, useTemporaryDirectory} from './tomo-test';\nimport commands from '../src/commands';\nimport addMakefile from '../src/commands/add-makefile';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Makefile', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support (create empty Makefile)', async () => {\n        await run(addMakefile, {});\n        const makefile = readMakefileContent();\n        expect(makefile).toMatchSnapshot();\n    });\n    test('Add support (import tasks from package.json)', async () => {\n        const {create} = commands;\n        await run(create.app, {skipInstall});\n        await run(addMakefile, {});\n        const makefile = readMakefileContent();\n        expect(makefile).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-makefile.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "describe33",
    "testId": 33,
    "memberof": "__tests__/commands-makefile.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-makefile.test.js~describe33",
    "access": null,
    "description": "Makefile",
    "lineNumber": 7
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "test34",
    "testId": 34,
    "memberof": "__tests__/commands-makefile.test.js~describe33",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-makefile.test.js~describe33.test34",
    "access": null,
    "description": "Add support (create empty Makefile)",
    "lineNumber": 18
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "test35",
    "testId": 35,
    "memberof": "__tests__/commands-makefile.test.js~describe33",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-makefile.test.js~describe33.test35",
    "access": null,
    "description": "Add support (import tasks from package.json)",
    "lineNumber": 23
  },
  {
    "__docId__": 332,
    "kind": "testFile",
    "name": "__tests__/commands-marionette.test.js",
    "content": "import {fileContents, getDirectoryTree, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport addMarionette from '../src/commands/add-marionette';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Marionette', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const omit = ['extension', 'path', 'size', 'type'];\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addMarionette, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('./package.json');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-marionette.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "__tests__/commands-marionette.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-marionette.test.js~describe36",
    "access": null,
    "description": "Marionette",
    "lineNumber": 7
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "test37",
    "testId": 37,
    "memberof": "__tests__/commands-marionette.test.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-marionette.test.js~describe36.test37",
    "access": null,
    "description": "Add support",
    "lineNumber": 19
  },
  {
    "__docId__": 335,
    "kind": "testFile",
    "name": "__tests__/commands-parcel.test.js",
    "content": "import {fileContents, getDirectoryTree, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport addEslint from '../src/commands/add-eslint';\nimport {addParcel, removeParcel} from '../src/commands/add-parcel';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Parcel', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const omit = ['extension', 'path', 'size', 'type'];\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addEslint, {skipInstall});\n        await run(addParcel, {skipInstall});\n        const pkg = fileContents('./package.json');\n        // const purgecssConfig = fileContents('./purgecss.config.js');\n        expect(pkg).toMatchSnapshot();\n        // expect(purgecssConfig).toMatchSnapshot();\n    });\n    test('Remove support', async () => {\n        await run(createPackageJson, {});\n        await run(addEslint, {skipInstall});\n        await run(addParcel, {skipInstall});\n        await run(removeParcel, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('./package.json');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-parcel.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "__tests__/commands-parcel.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-parcel.test.js~describe38",
    "access": null,
    "description": "Parcel",
    "lineNumber": 8
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "test39",
    "testId": 39,
    "memberof": "__tests__/commands-parcel.test.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-parcel.test.js~describe38.test39",
    "access": null,
    "description": "Add support",
    "lineNumber": 20
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "test40",
    "testId": 40,
    "memberof": "__tests__/commands-parcel.test.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-parcel.test.js~describe38.test40",
    "access": null,
    "description": "Remove support",
    "lineNumber": 29
  },
  {
    "__docId__": 339,
    "kind": "testFile",
    "name": "__tests__/commands-postcss.test.js",
    "content": "import {fileContents, getDirectoryTree, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport {addPostcss, removePostcss} from '../src/commands/add-postcss';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('PostCSS', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const omit = ['extension', 'path', 'size', 'type'];\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addPostcss, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const packageJson = fileContents('./package.json');\n        const postcssConfig = fileContents('./postcss.config.js');\n        expect(tree).toMatchSnapshot();\n        expect(packageJson).toMatchSnapshot();\n        expect(postcssConfig).toMatchSnapshot();\n    });\n    test('Remove support', async () => {\n        await run(createPackageJson, {});\n        await run(addPostcss, {skipInstall});\n        await run(removePostcss, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const packageJson = fileContents('./package.json');\n        expect(tree).toMatchSnapshot();\n        expect(packageJson).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-postcss.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "__tests__/commands-postcss.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-postcss.test.js~describe41",
    "access": null,
    "description": "PostCSS",
    "lineNumber": 7
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "test42",
    "testId": 42,
    "memberof": "__tests__/commands-postcss.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-postcss.test.js~describe41.test42",
    "access": null,
    "description": "Add support",
    "lineNumber": 19
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "test43",
    "testId": 43,
    "memberof": "__tests__/commands-postcss.test.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-postcss.test.js~describe41.test43",
    "access": null,
    "description": "Remove support",
    "lineNumber": 29
  },
  {
    "__docId__": 343,
    "kind": "testFile",
    "name": "__tests__/commands-reason.test.js",
    "content": "import {fileContents, getDirectoryTree, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport {addReason, removeReason} from '../src/commands/add-reason';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Reason', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const useReact = true;\n    const options = {skipInstall, useReact};\n    const omit = ['extension', 'path', 'size', 'type'];\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addReason, options);\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('package.json');\n        const bsConfig = fileContents('bsconfig.json');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n        expect(bsConfig).toMatchSnapshot();\n    });\n    test('Remove support', async () => {\n        await run(createPackageJson, {});\n        await run(addReason, options);\n        await run(removeReason, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('package.json');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-reason.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "describe44",
    "testId": 44,
    "memberof": "__tests__/commands-reason.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-reason.test.js~describe44",
    "access": null,
    "description": "Reason",
    "lineNumber": 7
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "test45",
    "testId": 45,
    "memberof": "__tests__/commands-reason.test.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-reason.test.js~describe44.test45",
    "access": null,
    "description": "Add support",
    "lineNumber": 21
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "test46",
    "testId": 46,
    "memberof": "__tests__/commands-reason.test.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-reason.test.js~describe44.test46",
    "access": null,
    "description": "Remove support",
    "lineNumber": 31
  },
  {
    "__docId__": 347,
    "kind": "testFile",
    "name": "__tests__/commands-rollup.test.js",
    "content": "import {fileContents, getDirectoryTree, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport addEslint from '../src/commands/add-eslint';\nimport {addRollup, removeRollup} from '../src/commands/add-rollup';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Rollup', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const useReact = true;\n    const omit = ['extension', 'path', 'size', 'type'];\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addEslint, {skipInstall});\n        await run(addRollup, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('package.json');\n        const rollupConfig = fileContents('rollup.config.js');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n        expect(rollupConfig).toMatchSnapshot();\n    });\n    test('Add support (+React)', async () => {\n        await run(createPackageJson, {});\n        await run(addEslint, {skipInstall, useReact});\n        await run(addRollup, {skipInstall, useReact});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('package.json');\n        const rollupConfig = fileContents('rollup.config.js');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n        expect(rollupConfig).toMatchSnapshot();\n    });\n    test('Remove support', async () => {\n        await run(createPackageJson, {});\n        await run(addEslint, {skipInstall});\n        await run(addRollup, {skipInstall});\n        await run(removeRollup, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const pkg = fileContents('package.json');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-rollup.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "describe47",
    "testId": 47,
    "memberof": "__tests__/commands-rollup.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-rollup.test.js~describe47",
    "access": null,
    "description": "Rollup",
    "lineNumber": 8
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "test48",
    "testId": 48,
    "memberof": "__tests__/commands-rollup.test.js~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-rollup.test.js~describe47.test48",
    "access": null,
    "description": "Add support",
    "lineNumber": 21
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "test49",
    "testId": 49,
    "memberof": "__tests__/commands-rollup.test.js~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-rollup.test.js~describe47.test49",
    "access": null,
    "description": "Add support (+React)",
    "lineNumber": 32
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "test50",
    "testId": 50,
    "memberof": "__tests__/commands-rollup.test.js~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-rollup.test.js~describe47.test50",
    "access": null,
    "description": "Remove support",
    "lineNumber": 43
  },
  {
    "__docId__": 352,
    "kind": "testFile",
    "name": "__tests__/commands-webpack-with-cesium.test.js",
    "content": "import {fileContents, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport addBabel from '../src/commands/add-babel';\nimport addEslint from '../src/commands/add-eslint';\nimport {addWebpack} from '../src/commands/add-webpack';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Webpack with Cesium', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const useReact = true;\n    const withCesium = true;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addBabel, {skipInstall});\n        await run(addEslint, {skipInstall});\n        await run(addWebpack, {skipInstall, withCesium});\n        const webpackConfig = fileContents('./webpack.config.js');\n        expect(webpackConfig).toMatchSnapshot();\n    });\n    test('Add support (+React)', async () => {\n        await run(createPackageJson, {});\n        await run(addBabel, {skipInstall});\n        await run(addEslint, {skipInstall});\n        await run(addWebpack, {skipInstall, withCesium, useReact});\n        const webpackConfig = fileContents('./webpack.config.js');\n        expect(webpackConfig).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-webpack-with-cesium.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "describe51",
    "testId": 51,
    "memberof": "__tests__/commands-webpack-with-cesium.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-webpack-with-cesium.test.js~describe51",
    "access": null,
    "description": "Webpack with Cesium",
    "lineNumber": 9
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "test52",
    "testId": 52,
    "memberof": "__tests__/commands-webpack-with-cesium.test.js~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-webpack-with-cesium.test.js~describe51.test52",
    "access": null,
    "description": "Add support",
    "lineNumber": 22
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "test53",
    "testId": 53,
    "memberof": "__tests__/commands-webpack-with-cesium.test.js~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-webpack-with-cesium.test.js~describe51.test53",
    "access": null,
    "description": "Add support (+React)",
    "lineNumber": 30
  },
  {
    "__docId__": 356,
    "kind": "testFile",
    "name": "__tests__/commands-webpack.test.js",
    "content": "import {fileContents, getDirectoryTree, run, useTemporaryDirectory} from './tomo-test';\nimport {createPackageJson} from '../src/commands/common';\nimport addBabel from '../src/commands/add-babel';\nimport addEslint from '../src/commands/add-eslint';\nimport {addWebpack, removeWebpack} from '../src/commands/add-webpack';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('Webpack', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const useReact = true;\n    const omit = ['extension', 'path', 'size', 'type'];\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('Add support', async () => {\n        await run(createPackageJson, {});\n        await run(addBabel, {skipInstall});\n        await run(addEslint, {skipInstall});\n        await run(addWebpack, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const packageJson = fileContents('./package.json');\n        const webpackConfig = fileContents('./webpack.config.js');\n        expect(tree).toMatchSnapshot();\n        expect(packageJson).toMatchSnapshot();\n        expect(webpackConfig).toMatchSnapshot();\n    });\n    test('Add support (+React)', async () => {\n        await run(createPackageJson, {});\n        await run(addBabel, {skipInstall, useReact});\n        await run(addEslint, {skipInstall, useReact});\n        await run(addWebpack, {skipInstall, useReact});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const packageJson = fileContents('./package.json');\n        const eslintConfig = fileContents('./.eslintrc.js');\n        const webpackConfig = fileContents('./webpack.config.js');\n        expect(tree).toMatchSnapshot();\n        expect(packageJson).toMatchSnapshot();\n        expect(eslintConfig).toMatchSnapshot();\n        expect(webpackConfig).toMatchSnapshot();\n    });\n    test('Remove support', async () => {\n        await run(createPackageJson, {});\n        await run(addBabel, {skipInstall});\n        await run(addEslint, {skipInstall});\n        await run(addWebpack, {skipInstall});\n        await run(removeWebpack, {skipInstall});\n        const tree = getDirectoryTree(tempDirectory, {omit});\n        const packageJson = fileContents('./package.json');\n        expect(tree).toMatchSnapshot();\n        expect(packageJson).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/commands-webpack.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "__tests__/commands-webpack.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands-webpack.test.js~describe54",
    "access": null,
    "description": "Webpack",
    "lineNumber": 9
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "test55",
    "testId": 55,
    "memberof": "__tests__/commands-webpack.test.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-webpack.test.js~describe54.test55",
    "access": null,
    "description": "Add support",
    "lineNumber": 22
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "test56",
    "testId": 56,
    "memberof": "__tests__/commands-webpack.test.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-webpack.test.js~describe54.test56",
    "access": null,
    "description": "Add support (+React)",
    "lineNumber": 34
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "test57",
    "testId": 57,
    "memberof": "__tests__/commands-webpack.test.js~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands-webpack.test.js~describe54.test57",
    "access": null,
    "description": "Remove support",
    "lineNumber": 48
  },
  {
    "__docId__": 361,
    "kind": "testFile",
    "name": "__tests__/offline.test.js",
    "content": "import React from 'react';\nimport isOnline from 'is-online';\nimport {render} from 'ink-testing-library';\nimport {OfflineWarning, TaskList} from '../src/ui';\nimport {useTemporaryDirectory} from './tomo-test';\n\njest.mock('is-online', () => (async () => false));\n\ndescribe('Offline warning', () => {\n    let tempDirectory;\n    const ORIGINAL_CONSOLE_ERROR = console.error;//eslint-disable-line no-console\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    beforeAll(() => {\n        console.error = jest.fn();//eslint-disable-line no-console\n    });\n    afterAll(() => {\n        console.error = ORIGINAL_CONSOLE_ERROR;//eslint-disable-line no-console\n    });\n    test('is-online returns false (for testing)', async () => {\n        const result = await isOnline();\n        expect(result).toEqual(false);\n    });\n    test('can render', async () => {\n        const {lastFrame} = render(<OfflineWarning/>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    test('does not render when offline and skipInstall === true', done => {\n        const options = {skipInstall: true};\n        const {lastFrame} = render(<TaskList command={'add'} terms={['babel']} options={options} done={complete}></TaskList>);\n        function complete() {\n            expect(lastFrame()).toMatchSnapshot();\n            done();\n        }\n    });\n    test('renders when offline and skipInstall === false', done => {\n        const options = {skipInstall: false};\n        const {lastFrame} = render(<TaskList command={'add'} terms={['babel']} options={options} done={complete}></TaskList>);\n        function complete() {\n            expect(lastFrame()).toMatchSnapshot();\n            done();\n        }\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/offline.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "__tests__/offline.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/offline.test.js~describe58",
    "access": null,
    "description": "Offline warning",
    "lineNumber": 9
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "test59",
    "testId": 59,
    "memberof": "__tests__/offline.test.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/offline.test.js~describe58.test59",
    "access": null,
    "description": "is-online returns false (for testing)",
    "lineNumber": 26
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "test60",
    "testId": 60,
    "memberof": "__tests__/offline.test.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/offline.test.js~describe58.test60",
    "access": null,
    "description": "can render",
    "lineNumber": 30
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "test61",
    "testId": 61,
    "memberof": "__tests__/offline.test.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/offline.test.js~describe58.test61",
    "access": null,
    "description": "does not render when offline and skipInstall === true",
    "lineNumber": 34
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "test62",
    "testId": 62,
    "memberof": "__tests__/offline.test.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/offline.test.js~describe58.test62",
    "access": null,
    "description": "renders when offline and skipInstall === false",
    "lineNumber": 42
  },
  {
    "__docId__": 367,
    "kind": "testFile",
    "name": "__tests__/tomo-test.js",
    "content": "import crypto from 'crypto';\nimport {tmpdir} from 'os';\nimport {join} from 'path';\nimport {existsSync, mkdirp, readFileSync} from 'fs-extra';\nimport rimraf from 'rimraf';\nimport dirTree from 'directory-tree';\nimport {omit} from 'ramda';\nimport Queue from 'p-queue';\nimport delay from 'delay';\nimport {populateQueue} from '../src/utils';\nimport {format, maybeApply} from '../src/utils/common';\n\n// eslint-disable-next-line no-magic-numbers\nexport const testAsyncFunction = () => async ({skipInstall}) => await delay(skipInstall ? 0 : 1000 * Math.random());\nconst createTemporaryDirectory = async () => {\n    const tempDir = join(tmpdir(), `tomo-test-${crypto.randomBytes(20).toString('hex')}`);// eslint-disable-line no-magic-numbers\n    await mkdirp(tempDir);\n    return tempDir;\n};\nexport const useTemporaryDirectory = () => {\n    let tempDir;\n    const setTempDirectory = async () => {\n        tempDir = await createTemporaryDirectory();\n        return tempDir;\n    };\n    const cleanupTempDirectory = async () => {\n        await new Promise(resolve => rimraf(tempDir, resolve));\n    };\n    return [setTempDirectory, cleanupTempDirectory];\n};\nexport const removeAttributes = (obj, ...attrs) => {\n    const result = Object.entries(obj).reduce((acc, arr) => {\n        const [key, val] = arr;\n        const remove = val => removeAttributes(val, ...attrs);\n        return (key === 'children') ? {...acc, children: val.map(remove)} : {...acc, ...omit(attrs, {[key]: val})};\n    }, {});\n    return result;\n};\nexport const getDirectoryTree = (directory, options = {omit: ['extension', 'path']}) => {\n    const {omit} = options;\n    const tree = dirTree(directory);\n    const result = Object.assign(tree, {name: tree.name.substring(0, 'tomo-test'.length)});\n    return format(removeAttributes(result, ...omit));\n};\nexport const run = (tasks, options) => {\n    const {assign} = Object;\n    const queue = new Queue({concurrency: tasks.length});\n    const dispatch = () => {};\n    const defaults = {\n        assetsDirectory: './assets',\n        sourceDirectory: './source',\n        outputDirectory: './output',\n        port: 4669\n    };\n    const _options = assign({}, options, defaults);\n    return populateQueue({\n        queue,\n        dispatch,\n        tasks: tasks\n            .flatMap(val => maybeApply(val, _options))\n            .flatMap(val => maybeApply(val, _options)),\n        options: _options\n    });\n};\nexport const fileContents = path => {\n    const fullpath = join(process.cwd(), path);\n    return existsSync(fullpath) ? readFileSync(fullpath, 'utf8') : `No file found at ${fullpath}`;\n};\nexport const readMakefile = makefile => {\n    const [, ...rest] = makefile\n        .read()\n        .replace(/bin := .*\\/__tests__/, 'bin := home/user/project/__tests__')\n        .split('\\n');\n    return ['# Makefile created with tomo', ...rest].join('\\n');\n};\nexport const readMakefileContent = () => {\n    const regex = /^# Built from .*\\n/;\n    return fileContents('./Makefile').replace(regex, '# Makefile built from /path/to/package.json');\n};",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/tomo-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 368,
    "kind": "testFile",
    "name": "__tests__/ui.test.js",
    "content": "import {getDirectoryTree, useTemporaryDirectory} from './tomo-test';\nimport Queue from 'p-queue';\nimport React from 'react';\nimport {render} from 'ink-testing-library';\nimport {populateQueue} from '../src/utils';\nimport Tomo, {CommandError, Warning, Task} from '../src/ui';\n\njest.mock('is-online', () => (async () => true));\n\nconst ARROW_DOWN = '\\u001B[B';\nconst {assign} = Object;\n\ndescribe('populateQueue function', () => {\n    const text = 'test task text';\n    test('can run with defaults', () => {\n        populateQueue();\n    });\n    test('can run tasks with options and dispatch task results', async () => {\n        const condition = async () => true;\n        const task = jest.fn();\n        const options = {foo: 'bar'};\n        const customOptions = {some: 'option'};\n        const dispatch = jest.fn();\n        const tasks = [\n            {some: 'option'},\n            {condition, task, text: `${text}1`},\n            {condition, task, text: `${text}2`},\n            {condition, task, text: `${text}3`}\n        ];\n        const queue = new Queue({concurrency: tasks.length});\n        await populateQueue({queue, tasks, dispatch, options});\n        expect(task.mock.calls.length).toBe(3);\n        expect(dispatch.mock.calls.length).toBe(4);// eslint-disable-line no-magic-numbers\n        const [passedOptions] = [...new Set(task.mock.calls.map(val => val[0]))];\n        expect(passedOptions).toEqual(assign(options, customOptions, {isNotOffline: true}));\n        expect(dispatch.mock.calls).toMatchSnapshot();\n    });\n    test('dedupes tasks based on text value', async () => {\n        const condition = async () => true;\n        const task = jest.fn();\n        const options = {foo: 'bar'};\n        const customOptions = {some: 'option'};\n        const dispatch = jest.fn();\n        const tasks = [\n            {some: 'option'},\n            {condition, task, text},\n            {condition, task, text},\n            {condition, task, text}\n        ];\n        const queue = new Queue({concurrency: tasks.length});\n        await populateQueue({queue, tasks, dispatch, options});\n        expect(task.mock.calls.length).toBe(1);\n        expect(dispatch.mock.calls.length).toBe(2);// eslint-disable-line no-magic-numbers\n        const [passedOptions] = [...new Set(task.mock.calls.map(val => val[0]))];\n        expect(passedOptions).toEqual(assign(options, customOptions, {isNotOffline: true}));\n        expect(dispatch.mock.calls).toMatchSnapshot();\n    });\n    test('can only run tasks that pass condition', async () => {\n        const task = jest.fn();\n        const options = {foo: 'bar'};\n        const dispatch = jest.fn();\n        const tasks = [\n            {condition: async () => true, task, text: `${text}1`},\n            {condition: async () => false, task, text: `${text}2`},\n            {condition: async () => true, task, text: `${text}3`},\n            {condition: async () => false, task, text: `${text}4`}\n        ];\n        const queue = new Queue({concurrency: tasks.length});\n        await populateQueue({queue, tasks, dispatch, options});\n        const [passedOptions] = [...new Set(task.mock.calls.map(val => val[0]))];\n        expect(passedOptions).toMatchSnapshot();\n        expect(task.mock.calls.length).toBe(2);\n        expect(dispatch.mock.calls).toMatchSnapshot();\n    });\n    test('can catch task errors', async () => {\n        const task = jest.fn();\n        const options = {foo: 'bar'};\n        const dispatch = jest.fn();\n        const tasks = [\n            {text: `${text}1`, condition: async () => true, task},\n            {text: `${text}2`, condition: async () => {throw new Error();}, task},\n            {text: `${text}3`, condition: async () => true, task},\n            {text: `${text}4`, condition: async () => false, task}\n        ];\n        const queue = new Queue({concurrency: tasks.length});\n        await populateQueue({queue, tasks, dispatch, options});\n        expect(task.mock.calls.length).toBe(2);\n        expect(dispatch.mock.calls[2][0].type).toBe('error');\n    });\n});\ndescribe('Warning', () => {\n    test('can render', () => {\n        const callback = jest.fn();\n        const {lastFrame} = render(<Warning callback={callback}>Hello World</Warning>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n});\ndescribe('CommandError', () => {\n    let tempDirectory;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('can render component and create errors file', () => {\n        const errors = [{one: 1}, {two: 2}];\n        const {lastFrame} = render(<CommandError errors={errors}></CommandError>);\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n        expect(lastFrame()).toMatchSnapshot();\n    });\n});\ndescribe('Task component', () => {\n    test('can render (pending)', () => {\n        const text = 'test task text';\n        const {lastFrame} = render(<Task text={text} isPending={true}></Task>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    test('can render (completed)', () => {\n        const text = 'test task text';\n        const {lastFrame} = render(<Task text={text} isComplete={true}></Task>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    test('can render (skipped)', () => {\n        const text = 'test task text';\n        const {lastFrame} = render(<Task text={text} isComplete={true} isSkipped={true}></Task>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    test('can render (errored)', () => {\n        const text = 'test task text';\n        const {lastFrame} = render(<Task text={text} isErrored={true}></Task>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    test('can render with default text', () => {\n        const {lastFrame} = render(<Task isComplete={true}></Task>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n});\ndescribe('tomo', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    const ORIGINAL_CONSOLE_ERROR = console.error;//eslint-disable-line no-console\n    beforeAll(() => {\n        console.error = jest.fn();//eslint-disable-line no-console\n    });\n    afterAll(() => {\n        console.error = ORIGINAL_CONSOLE_ERROR;//eslint-disable-line no-console\n    });\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('add', () => {\n        const input = ['add'];\n        const {lastFrame, stdin} = render(<Tomo input={input} flags={{skipInstall}}/>);\n        expect(lastFrame()).toMatchSnapshot();\n        stdin.write(ARROW_DOWN);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    test('remove', () => {\n        const input = ['remove'];\n        const {lastFrame, stdin} = render(<Tomo input={input} flags={{skipInstall}} />);\n        expect(lastFrame()).toMatchSnapshot();\n        stdin.write(ARROW_DOWN);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    xtest('add eslint', done => {\n        const input = ['add', 'eslint'];\n        const flags = {skipInstall};\n        const {lastFrame} = render(<Tomo input={input} flags={flags} done={complete}/>);\n        function complete() {\n            expect(lastFrame()).toMatchSnapshot();\n            done();\n        }\n    });\n    xtest('add eslint --use-react', done => {\n        const input = ['add', 'eslint'];\n        const flags = {useReact: true, skipInstall};\n        const {lastFrame} = render(<Tomo input={input} flags={flags} done={complete}/>);\n        function complete() {\n            expect(lastFrame()).toMatchSnapshot();\n            done();\n        }\n    });\n});\n",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/ui.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "__tests__/ui.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/ui.test.js~describe63",
    "access": null,
    "description": "populateQueue function",
    "lineNumber": 13
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "test64",
    "testId": 64,
    "memberof": "__tests__/ui.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe63.test64",
    "access": null,
    "description": "can run with defaults",
    "lineNumber": 15
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "test65",
    "testId": 65,
    "memberof": "__tests__/ui.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe63.test65",
    "access": null,
    "description": "can run tasks with options and dispatch task results",
    "lineNumber": 18
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "test66",
    "testId": 66,
    "memberof": "__tests__/ui.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe63.test66",
    "access": null,
    "description": "dedupes tasks based on text value",
    "lineNumber": 38
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "test67",
    "testId": 67,
    "memberof": "__tests__/ui.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe63.test67",
    "access": null,
    "description": "can only run tasks that pass condition",
    "lineNumber": 58
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "test68",
    "testId": 68,
    "memberof": "__tests__/ui.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe63.test68",
    "access": null,
    "description": "can catch task errors",
    "lineNumber": 75
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "__tests__/ui.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/ui.test.js~describe69",
    "access": null,
    "description": "Warning",
    "lineNumber": 91
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "test70",
    "testId": 70,
    "memberof": "__tests__/ui.test.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe69.test70",
    "access": null,
    "description": "can render",
    "lineNumber": 92
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "describe71",
    "testId": 71,
    "memberof": "__tests__/ui.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/ui.test.js~describe71",
    "access": null,
    "description": "CommandError",
    "lineNumber": 98
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "test72",
    "testId": 72,
    "memberof": "__tests__/ui.test.js~describe71",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe71.test72",
    "access": null,
    "description": "can render component and create errors file",
    "lineNumber": 108
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "__tests__/ui.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/ui.test.js~describe73",
    "access": null,
    "description": "Task component",
    "lineNumber": 116
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "test74",
    "testId": 74,
    "memberof": "__tests__/ui.test.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe73.test74",
    "access": null,
    "description": "can render (pending)",
    "lineNumber": 117
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "test75",
    "testId": 75,
    "memberof": "__tests__/ui.test.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe73.test75",
    "access": null,
    "description": "can render (completed)",
    "lineNumber": 122
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "test76",
    "testId": 76,
    "memberof": "__tests__/ui.test.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe73.test76",
    "access": null,
    "description": "can render (skipped)",
    "lineNumber": 127
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "test77",
    "testId": 77,
    "memberof": "__tests__/ui.test.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe73.test77",
    "access": null,
    "description": "can render (errored)",
    "lineNumber": 132
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "test78",
    "testId": 78,
    "memberof": "__tests__/ui.test.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe73.test78",
    "access": null,
    "description": "can render with default text",
    "lineNumber": 137
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "__tests__/ui.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/ui.test.js~describe79",
    "access": null,
    "description": "tomo",
    "lineNumber": 142
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "test80",
    "testId": 80,
    "memberof": "__tests__/ui.test.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe79.test80",
    "access": null,
    "description": "add",
    "lineNumber": 160
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "test81",
    "testId": 81,
    "memberof": "__tests__/ui.test.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe79.test81",
    "access": null,
    "description": "remove",
    "lineNumber": 167
  },
  {
    "__docId__": 388,
    "kind": "testFile",
    "name": "__tests__/utils.test.js",
    "content": "import {\n    readMakefile as read,\n    useTemporaryDirectory\n} from './tomo-test';\nimport {\n    EslintConfigModuleEditor,\n    PackageJsonEditor,\n    choose,\n    getIntendedInput,\n    getVersions,\n    install,\n    uninstall,\n    withOptions\n} from '../src/utils';\nimport MakefileEditor from '../src/utils/MakefileEditor';\nimport {createFunctionModuleEditor} from '../src/utils/createModuleEditor';\nimport {join} from 'path';\nimport execa from 'execa';\nimport commands from '../src/commands';\n\njest.mock('execa');\n\nconst testDirectory = join(__dirname, 'tomo-fixtures');\n/**\n * Verify package.json editor can create and edit a package.json manifest file\n * @test {PackageJsonEditor}\n */\ndescribe('package.json mem-fs editor', () => {\n    let pkg;\n    beforeEach(() => {\n        pkg = new PackageJsonEditor(testDirectory);\n    });\n    test('create', async () => {\n        pkg = new PackageJsonEditor('/some/directory');\n        expect(pkg.read()).toEqual('');\n        await pkg.create();\n        expect(pkg.read()).toMatchSnapshot();\n    });\n    test('read', () => {\n        expect(pkg.read()).toMatchSnapshot();\n    });\n    test('extend', async () => {\n        await pkg.extend({scripts: {foo: 'bar'}});\n        expect(pkg.read()).toMatchSnapshot();\n    });\n    test('copy', async () => {\n        const newDirPath = join(testDirectory, 'new');\n        await pkg.copy(newDirPath);\n        expect(pkg.fs.readJSON(join(newDirPath, 'package.json'))).toMatchSnapshot();\n    });\n    test('delete', async () => {\n        pkg = new PackageJsonEditor('/some/directory');\n        expect(pkg.read()).toEqual('');\n        await pkg.create();\n        expect(pkg.read()).toMatchSnapshot();\n        await pkg.delete();\n        expect(pkg.read()).toEqual('');\n    });\n    test('hasSome', () => {\n        expect(pkg.hasSome('react')).toBeFalsy();\n        expect(pkg.hasSome('webpack', 'execa')).toBeTruthy();\n        expect(pkg.hasSome('eslint')).toBeTruthy();\n    });\n    test('hasAll', () => {\n        expect(pkg.hasAll('react')).toBeFalsy();\n        expect(pkg.hasAll('some-module', 'execa')).toBeFalsy();\n        expect(pkg.hasAll('chalk', 'execa')).toBeTruthy();\n        // expect(pkg.hasAll('chalk', 'execa', '@babel/cli')).toBeTruthy();\n        expect(pkg.hasAll('eslint')).toBeTruthy();\n    });\n});\n/**\n * Verify ESLint module editor can create and edit an ESLint configuration file\n * @test {EslintConfigModuleEditor}\n */\ndescribe('.eslintrc.js mem-fs editor', () => {\n    let cfg;\n    let tempDirectory;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n        cfg = new EslintConfigModuleEditor(testDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('create', async () => {\n        cfg = new EslintConfigModuleEditor('/some/directory');\n        expect(cfg.read()).toEqual('');\n        await cfg.create();\n        expect(cfg.read()).toMatchSnapshot();\n    });\n    test('read', () => {\n        expect(cfg.read()).toMatchSnapshot();\n    });\n    test('extend', async () => {\n        expect(await cfg.read()).toMatchSnapshot();\n        await cfg.extend({key: {foo: `'foo'`}});\n        expect(await cfg.read()).toMatchSnapshot();\n        await cfg.extend({key: {bar: `'bar'`}});\n        expect(await cfg.read()).toMatchSnapshot();\n    });\n    test('delete', async () => {\n        cfg = new EslintConfigModuleEditor('/some/directory');\n        expect(cfg.read()).toEqual('');\n        await cfg.create();\n        expect(cfg.read()).toMatchSnapshot();\n        await cfg.delete();\n        expect(cfg.read()).toEqual('');\n    });\n    test('prepend', async () => {\n        await cfg.prepend(`const {existsSync} = require('fs-extra');`);\n        expect(cfg.read()).toMatchSnapshot();\n        await cfg.prepend(`const {join} = require('path');`);\n        expect(cfg.read()).toMatchSnapshot();\n        await cfg.extend({key: {baz: 'baz'}});\n        expect(cfg.read()).toMatchSnapshot();\n    });\n});\ndescribe('Makefile editor', () => {\n    let makefile;\n    beforeEach(() => {\n        makefile = new MakefileEditor(testDirectory);\n    });\n    test('create', async () => {\n        await makefile.create();\n        expect(read(makefile)).toMatchSnapshot();\n    });\n    test('append', async () => {\n        await makefile.append('test line');\n        expect(read(makefile)).toMatchSnapshot();\n    });\n    test('addTask', async () => {\n        await makefile\n            .addTask('foo', ['echo foo'], {description: 'Foo task'})\n            .addTask('bar', ['echo bar'], {description: 'Bar task'})\n            .done();\n        expect(read(makefile)).toMatchSnapshot();\n    });\n    test('addComment', async () => {\n        await makefile.addComment('Knowledge of the Holy One is understanding');\n        expect(read(makefile)).toMatchSnapshot();\n    });\n    test('importScripts', () => {\n        expect(makefile.scripts).toMatchSnapshot();\n        makefile.importScripts();\n        expect(makefile.scripts).toMatchSnapshot();\n    });\n    test('appendScripts (no bin variable)', async () => {\n        makefile = new MakefileEditor(join(testDirectory, 'other-directory'));\n        await makefile\n            .importScripts()\n            .appendScripts()\n            .done();\n        expect(read(makefile)).toMatchSnapshot();\n    });\n    test('appendScripts (with bin variable)', async () => {\n        await makefile\n            .importScripts()\n            .appendScripts()\n            .done();\n        expect(read(makefile)).toMatchSnapshot();\n    });\n});\ndescribe('createFunctionModuleEditor', () => {\n    const content = {foo: `'bar'`};\n    test('can create function module (defaults)', async () => {\n        const Module = createFunctionModuleEditor('webpack.config.js', content);\n        expect(await (new Module()).create().read()).toMatchSnapshot();\n    });\n    test('can create function module with passed parameters', async () => {\n        const params = ['foo', 'bar'];\n        const Module = createFunctionModuleEditor('webpack.config.js', content, {params});\n        expect(await (new Module()).create().read()).toMatchSnapshot();\n    });\n    test('can create function module with passed []', async () => {\n        const params = [];\n        const Module = createFunctionModuleEditor('webpack.config.js', content, {params});\n        expect(await (new Module()).create().read()).toMatchSnapshot();\n    });\n    test('can create function ES module (defaults)', async () => {\n        const esm = true;\n        const Module = createFunctionModuleEditor('webpack.config.js', content, {esm});\n        expect(await (new Module()).create().read()).toMatchSnapshot();\n    });\n    test('can create function ES module with passed parameters', async () => {\n        const esm = true;\n        const params = ['foo', 'bar'];\n        const Module = createFunctionModuleEditor('webpack.config.js', content, {esm, params});\n        expect(await (new Module()).create().read()).toMatchSnapshot();\n    });\n    test('can create function ES module with passed []', async () => {\n        const esm = true;\n        const params = [];\n        const Module = createFunctionModuleEditor('webpack.config.js', content, {esm, params});\n        expect(await (new Module()).create().read()).toMatchSnapshot();\n    });\n});\ndescribe('choose via options', () => {\n    test('with and without default options', () => {\n        const withoutDefault = {\n            a: ['a', 'aa', 'aaa'],\n            b: ['b', 'bb', 'bbb'],\n            c: ['c', 'cc', 'ccc']\n        };\n        const withDefault = {\n            a: ['a', 'aa', 'aaa'],\n            b: ['b', 'bb', 'bbb'],\n            c: ['c', 'cc', 'ccc'],\n            default: [0, 0, 0]\n        };\n        expect(choose(withoutDefault)({d: true})).toEqual(withoutDefault.a);\n        expect(choose(withDefault)({d: true})).toEqual(withDefault.default);\n        expect(choose(withDefault)({b: true})).toEqual(withDefault.b);\n        expect(choose(withDefault)({b: true, c: true})).toEqual(withDefault.b);\n        expect(choose(withDefault)({a: false, c: true})).toEqual(withDefault.c);\n    });\n});\ndescribe('getIntendedInput', () => {\n    test('return closest matches', () => {\n        const {intendedCommand, intendedTerms} = getIntendedInput(commands, 'ad', ['lint']);\n        expect(intendedCommand).toEqual('add');\n        expect(intendedTerms).toEqual(['eslint']);\n    });\n});\ndescribe('getVersions', () => {\n    test('handle no module name', async () => {\n        expect(await getVersions()).toEqual([]);\n    });\n    test('format response from npm (only allow valid version strings)', async () => {\n        const stdout = '1.0.0 ,\\n 2.0.0 ,\\n not valid ,\\n 3.0.0 ';\n        execa.mockResolvedValue({stdout});\n        expect(await getVersions('some-module-name')).toMatchSnapshot();\n    });\n});\ndescribe('install', () => {\n    const latest = true;\n    const skipInstall = true;\n    const dev = true;\n    test('handle array of string names', async () => {\n        expect(await install()).toEqual(['install']);\n        expect(await install(['some-module'])).toEqual(['install', 'some-module@latest']);\n        expect(await install(['some-module'])).toEqual(['install', 'some-module@latest']);\n        expect(await install(['some-module'], {latest: false, skipInstall})).toEqual(['install', 'some-module']);\n        expect(await install(['foo', 'bar'], {latest: false, skipInstall})).toEqual(['install', 'foo', 'bar']);\n        expect(await install(['some-module'], {dev, skipInstall})).toEqual(['install', 'some-module', '--save-dev']);\n        expect(await install(['some-module'], {dev, latest, skipInstall})).toEqual(['install', 'some-module@latest', '--save-dev']);\n        expect(await install(['foo', 'bar'], {latest: false, dev, skipInstall})).toEqual(['install', 'foo', 'bar', '--save-dev']);\n    });\n    test('only allow valid module names', async () => {\n        const INVALID_NAME = 'eLaBorAtE-paCkAgE-with-mixed-case';\n        expect(await install([INVALID_NAME])).toEqual(['install']);\n        expect(await install(['jest', INVALID_NAME])).toEqual(['install', 'jest@latest']);\n    });\n});\ndescribe('uninstall', () => {\n    test('handle array of string names', async () => {\n        expect(await uninstall()).toEqual(['uninstall']);\n        expect(await uninstall(['some-module'])).toEqual(['uninstall', 'some-module']);\n        expect(await uninstall(['some-module', 'foo', 'bar'])).toEqual(['uninstall', 'some-module', 'foo', 'bar']);\n    });\n    test('only allow valid module names', async () => {\n        const INVALID_NAME = 'eLaBorAtE-paCkAgE-with-mixed-case';\n        expect(await uninstall([INVALID_NAME])).toEqual(['uninstall']);\n        expect(await uninstall(['jest', INVALID_NAME])).toEqual(['uninstall', 'jest']);\n    });\n});\ndescribe('withOptions', () => {\n    test('add custom options', () => {\n        const options = {a: 1, b: 2};\n        expect(withOptions({a: 0, c: 1})(options)).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/utils.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe82",
    "access": null,
    "description": "Verify package.json editor can create and edit a package.json manifest file",
    "lineNumber": 28,
    "testTargets": [
      "PackageJsonEditor"
    ]
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "test83",
    "testId": 83,
    "memberof": "__tests__/utils.test.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe82.test83",
    "access": null,
    "description": "create",
    "lineNumber": 33
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "test84",
    "testId": 84,
    "memberof": "__tests__/utils.test.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe82.test84",
    "access": null,
    "description": "read",
    "lineNumber": 39
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "test85",
    "testId": 85,
    "memberof": "__tests__/utils.test.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe82.test85",
    "access": null,
    "description": "extend",
    "lineNumber": 42
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "test86",
    "testId": 86,
    "memberof": "__tests__/utils.test.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe82.test86",
    "access": null,
    "description": "copy",
    "lineNumber": 46
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "test87",
    "testId": 87,
    "memberof": "__tests__/utils.test.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe82.test87",
    "access": null,
    "description": "delete",
    "lineNumber": 51
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "test88",
    "testId": 88,
    "memberof": "__tests__/utils.test.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe82.test88",
    "access": null,
    "description": "hasSome",
    "lineNumber": 59
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "test89",
    "testId": 89,
    "memberof": "__tests__/utils.test.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe82.test89",
    "access": null,
    "description": "hasAll",
    "lineNumber": 64
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "describe90",
    "testId": 90,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe90",
    "access": null,
    "description": "Verify ESLint module editor can create and edit an ESLint configuration file",
    "lineNumber": 76,
    "testTargets": [
      "EslintConfigModuleEditor"
    ]
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "test91",
    "testId": 91,
    "memberof": "__tests__/utils.test.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe90.test91",
    "access": null,
    "description": "create",
    "lineNumber": 88
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "test92",
    "testId": 92,
    "memberof": "__tests__/utils.test.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe90.test92",
    "access": null,
    "description": "read",
    "lineNumber": 94
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "test93",
    "testId": 93,
    "memberof": "__tests__/utils.test.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe90.test93",
    "access": null,
    "description": "extend",
    "lineNumber": 97
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "test94",
    "testId": 94,
    "memberof": "__tests__/utils.test.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe90.test94",
    "access": null,
    "description": "delete",
    "lineNumber": 104
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "test95",
    "testId": 95,
    "memberof": "__tests__/utils.test.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe90.test95",
    "access": null,
    "description": "prepend",
    "lineNumber": 112
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "describe96",
    "testId": 96,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe96",
    "access": null,
    "description": "Makefile editor",
    "lineNumber": 121
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "test97",
    "testId": 97,
    "memberof": "__tests__/utils.test.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe96.test97",
    "access": null,
    "description": "create",
    "lineNumber": 126
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "test98",
    "testId": 98,
    "memberof": "__tests__/utils.test.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe96.test98",
    "access": null,
    "description": "append",
    "lineNumber": 130
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "test99",
    "testId": 99,
    "memberof": "__tests__/utils.test.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe96.test99",
    "access": null,
    "description": "addTask",
    "lineNumber": 134
  },
  {
    "__docId__": 407,
    "kind": "test",
    "name": "test100",
    "testId": 100,
    "memberof": "__tests__/utils.test.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe96.test100",
    "access": null,
    "description": "addComment",
    "lineNumber": 141
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "test101",
    "testId": 101,
    "memberof": "__tests__/utils.test.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe96.test101",
    "access": null,
    "description": "importScripts",
    "lineNumber": 145
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "test102",
    "testId": 102,
    "memberof": "__tests__/utils.test.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe96.test102",
    "access": null,
    "description": "appendScripts (no bin variable)",
    "lineNumber": 150
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "test103",
    "testId": 103,
    "memberof": "__tests__/utils.test.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe96.test103",
    "access": null,
    "description": "appendScripts (with bin variable)",
    "lineNumber": 158
  },
  {
    "__docId__": 411,
    "kind": "test",
    "name": "describe104",
    "testId": 104,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe104",
    "access": null,
    "description": "createFunctionModuleEditor",
    "lineNumber": 166
  },
  {
    "__docId__": 412,
    "kind": "test",
    "name": "test105",
    "testId": 105,
    "memberof": "__tests__/utils.test.js~describe104",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe104.test105",
    "access": null,
    "description": "can create function module (defaults)",
    "lineNumber": 168
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "test106",
    "testId": 106,
    "memberof": "__tests__/utils.test.js~describe104",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe104.test106",
    "access": null,
    "description": "can create function module with passed parameters",
    "lineNumber": 172
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "test107",
    "testId": 107,
    "memberof": "__tests__/utils.test.js~describe104",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe104.test107",
    "access": null,
    "description": "can create function module with passed []",
    "lineNumber": 177
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "test108",
    "testId": 108,
    "memberof": "__tests__/utils.test.js~describe104",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe104.test108",
    "access": null,
    "description": "can create function ES module (defaults)",
    "lineNumber": 182
  },
  {
    "__docId__": 416,
    "kind": "test",
    "name": "test109",
    "testId": 109,
    "memberof": "__tests__/utils.test.js~describe104",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe104.test109",
    "access": null,
    "description": "can create function ES module with passed parameters",
    "lineNumber": 187
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "test110",
    "testId": 110,
    "memberof": "__tests__/utils.test.js~describe104",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe104.test110",
    "access": null,
    "description": "can create function ES module with passed []",
    "lineNumber": 193
  },
  {
    "__docId__": 418,
    "kind": "test",
    "name": "describe111",
    "testId": 111,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe111",
    "access": null,
    "description": "choose via options",
    "lineNumber": 200
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "test112",
    "testId": 112,
    "memberof": "__tests__/utils.test.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe111.test112",
    "access": null,
    "description": "with and without default options",
    "lineNumber": 201
  },
  {
    "__docId__": 420,
    "kind": "test",
    "name": "describe113",
    "testId": 113,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe113",
    "access": null,
    "description": "getIntendedInput",
    "lineNumber": 220
  },
  {
    "__docId__": 421,
    "kind": "test",
    "name": "test114",
    "testId": 114,
    "memberof": "__tests__/utils.test.js~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe113.test114",
    "access": null,
    "description": "return closest matches",
    "lineNumber": 221
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "describe115",
    "testId": 115,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe115",
    "access": null,
    "description": "getVersions",
    "lineNumber": 227
  },
  {
    "__docId__": 423,
    "kind": "test",
    "name": "test116",
    "testId": 116,
    "memberof": "__tests__/utils.test.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe115.test116",
    "access": null,
    "description": "handle no module name",
    "lineNumber": 228
  },
  {
    "__docId__": 424,
    "kind": "test",
    "name": "test117",
    "testId": 117,
    "memberof": "__tests__/utils.test.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe115.test117",
    "access": null,
    "description": "format response from npm (only allow valid version strings)",
    "lineNumber": 231
  },
  {
    "__docId__": 425,
    "kind": "test",
    "name": "describe118",
    "testId": 118,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe118",
    "access": null,
    "description": "install",
    "lineNumber": 237
  },
  {
    "__docId__": 426,
    "kind": "test",
    "name": "test119",
    "testId": 119,
    "memberof": "__tests__/utils.test.js~describe118",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe118.test119",
    "access": null,
    "description": "handle array of string names",
    "lineNumber": 241
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "test120",
    "testId": 120,
    "memberof": "__tests__/utils.test.js~describe118",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe118.test120",
    "access": null,
    "description": "only allow valid module names",
    "lineNumber": 251
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "describe121",
    "testId": 121,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe121",
    "access": null,
    "description": "uninstall",
    "lineNumber": 257
  },
  {
    "__docId__": 429,
    "kind": "test",
    "name": "test122",
    "testId": 122,
    "memberof": "__tests__/utils.test.js~describe121",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe121.test122",
    "access": null,
    "description": "handle array of string names",
    "lineNumber": 258
  },
  {
    "__docId__": 430,
    "kind": "test",
    "name": "test123",
    "testId": 123,
    "memberof": "__tests__/utils.test.js~describe121",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe121.test123",
    "access": null,
    "description": "only allow valid module names",
    "lineNumber": 263
  },
  {
    "__docId__": 431,
    "kind": "test",
    "name": "describe124",
    "testId": 124,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe124",
    "access": null,
    "description": "withOptions",
    "lineNumber": 269
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "test125",
    "testId": 125,
    "memberof": "__tests__/utils.test.js~describe124",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe124.test125",
    "access": null,
    "description": "add custom options",
    "lineNumber": 270
  },
  {
    "__docId__": 433,
    "kind": "testFile",
    "name": "__tests__/yodawg.test.js",
    "content": "import {existsSync} from 'fs';\nimport {join} from 'path';\nimport {removeAttributes, getDirectoryTree, useTemporaryDirectory} from './tomo-test';\nimport {format} from '../src/utils/common';\n\ndescribe('Tomo testing tools', () => {\n    test('can create and cleanup temporary directories', async () => {\n        const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n        const tempDir = await setTempDir();\n        expect(existsSync(tempDir)).toBeTruthy();\n        await cleanupTempDir();\n        expect(existsSync(tempDir)).not.toBeTruthy();\n    });\n    test('can format objects for use as snapshots', () => {\n        const data = {\n            path: 'a',\n            type: 'directory',\n            children: [\n                {\n                    path: 'aa',\n                    type: 'file'\n                },\n                {\n                    path: 'b',\n                    type: 'directory',\n                    children: [\n                        {\n                            path: 'c',\n                            type: 'directory',\n                            children: [\n                                {\n                                    path: 'd',\n                                    type: 'file'\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        };\n        const result = removeAttributes(data, 'path');\n        expect(format(result)).toMatchSnapshot();\n    });\n    test('get directory tree', () => {\n        const folderpath = join(__dirname, 'tomo-fixtures/test-folder-tree');\n        const tree = getDirectoryTree(folderpath);\n        expect(tree).toMatchSnapshot();\n        const augmentedTree = getDirectoryTree(folderpath, {omit: ['path', 'name']});\n        expect(augmentedTree).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/Users/jason/dev/tomo-cli/__tests__/yodawg.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "describe126",
    "testId": 126,
    "memberof": "__tests__/yodawg.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/yodawg.test.js~describe126",
    "access": null,
    "description": "Tomo testing tools",
    "lineNumber": 6
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "test127",
    "testId": 127,
    "memberof": "__tests__/yodawg.test.js~describe126",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/yodawg.test.js~describe126.test127",
    "access": null,
    "description": "can create and cleanup temporary directories",
    "lineNumber": 7
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "test128",
    "testId": 128,
    "memberof": "__tests__/yodawg.test.js~describe126",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/yodawg.test.js~describe126.test128",
    "access": null,
    "description": "can format objects for use as snapshots",
    "lineNumber": 14
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "test129",
    "testId": 129,
    "memberof": "__tests__/yodawg.test.js~describe126",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/yodawg.test.js~describe126.test129",
    "access": null,
    "description": "get directory tree",
    "lineNumber": 44
  }
]