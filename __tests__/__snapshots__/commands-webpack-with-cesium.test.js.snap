// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Webpack with Cesium Add support (+React) 1`] = `
"/* eslint-env node */
const {join, resolve} = require('path');
const {DefinePlugin} = require('webpack');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const DashboardPlugin = require('webpack-dashboard/plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const SriPlugin = require('webpack-subresource-integrity');
const TerserPlugin = require('terser-webpack-plugin');
const source = 'node_modules/cesium/Build/Cesium';

module.exports = (env, argv) => ({
    mode: argv.mode === 'production' ? 'production' : 'development',
    entry: [
        ...(argv.mode === 'production' ? [] : ['react-hot-loader/patch']),
        './source/main.jsx'
    ],
    devtool: (argv.mode === 'production') ? void 0 : 'eval-source-map',
    output: {
        path: resolve('./dist'),
        filename: 'bundle.min.js',
        crossOriginLoading: 'anonymous'
    },
    context: __dirname,
    devServer: {
        port: 4669,
        disableHostCheck: true,
        contentBase: './output',
        compress: true,
        host: '0.0.0.0',
        useLocalIp: true,
        watchContentBase: true
    },
    module: {
        rules: [
            {
                test: /.jsx?$/,
                exclude: /node_modules/,
                loader: 'babel-loader',
                options: {
                    presets: [
                        '@babel/env'
                    ]
                }
            },
            {
                test: /.css$/,
                resourceQuery: /thirdparty/,
                use: [
                    'style-loader',
                    'css-loader'
                ]
            },
            {
                test: /.css$/,
                exclude: /node_modules/,
                use: [
                    'style-loader',
                    {
                        loader: 'css-loader',
                        options: {
                            importLoaders: 1
                        }
                    },
                    'postcss-loader'
                ]
            },
            {
                test: /\\\\\\\\.(woff(2)?|ttf|eot|svg)(\\\\\\\\?v=\\\\\\\\d+\\\\\\\\.\\\\\\\\d+\\\\\\\\.\\\\\\\\d+)?$/,
                use: [
                    'file-loader'
                ]
            },
            {
                test: /.(png|gif|jpg|jpeg|svg|xml|json)$/,
                use: [
                    'url-loader'
                ]
            }
        ]
    },
    optimization: {
        minimize: argv.mode === 'production',
        minimizer: [new TerserPlugin()]
    },
    plugins: [
        new DashboardPlugin(),
        new HtmlWebpackPlugin({title: \`tomo webapp [\${argv.mode === 'production' ? 'production' : 'development'}]\`, template: 'assets/index.html'}),
        new SriPlugin({hashFuncNames: ['sha256'], enabled: argv.mode === 'production'}),
        new DefinePlugin({CESIUM_BASE_URL: JSON.stringify('/')}),
        new CopyWebpackPlugin({patterns: [{from: join(source, 'Workers'), to: 'Workers'},{from: join(source, 'ThirdParty'), to: 'ThirdParty'},{from: join(source, 'Assets'), to: 'Assets'},{from: join(source, 'Widgets'), to: 'Widgets'}]})
    ],
    resolve: {
        mainFields: ['module', 'main'],
        modules: [resolve(__dirname, './source'), 'node_modules'],
        extensions: ['.js', '.jsx'],
        alias: {
            'react-dom': '@hot-loader/react-dom'
        }
    }
});"
`;

exports[`Webpack with Cesium Add support 1`] = `
"/* eslint-env node */
const {join, resolve} = require('path');
const {DefinePlugin} = require('webpack');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const DashboardPlugin = require('webpack-dashboard/plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const SriPlugin = require('webpack-subresource-integrity');
const TerserPlugin = require('terser-webpack-plugin');
const source = 'node_modules/cesium/Build/Cesium';

module.exports = (env, argv) => ({
    mode: argv.mode === 'production' ? 'production' : 'development',
    entry: {
        app: './source/main.js'
    },
    devtool: (argv.mode === 'production') ? void 0 : 'eval-source-map',
    output: {
        path: resolve('./dist'),
        filename: 'bundle.min.js',
        crossOriginLoading: 'anonymous'
    },
    context: __dirname,
    devServer: {
        port: 4669,
        disableHostCheck: true,
        contentBase: './output',
        compress: true,
        host: '0.0.0.0',
        useLocalIp: true,
        watchContentBase: true
    },
    module: {
        rules: [
            {
                test: /.jsx?$/,
                exclude: /node_modules/,
                loader: 'babel-loader',
                options: {
                    presets: [
                        '@babel/env'
                    ]
                }
            },
            {
                test: /.css$/,
                resourceQuery: /thirdparty/,
                use: [
                    'style-loader',
                    'css-loader'
                ]
            },
            {
                test: /.css$/,
                exclude: /node_modules/,
                use: [
                    'style-loader',
                    {
                        loader: 'css-loader',
                        options: {
                            importLoaders: 1
                        }
                    },
                    'postcss-loader'
                ]
            },
            {
                test: /\\\\\\\\.(woff(2)?|ttf|eot|svg)(\\\\\\\\?v=\\\\\\\\d+\\\\\\\\.\\\\\\\\d+\\\\\\\\.\\\\\\\\d+)?$/,
                use: [
                    'file-loader'
                ]
            },
            {
                test: /.(png|gif|jpg|jpeg|svg|xml|json)$/,
                use: [
                    'url-loader'
                ]
            }
        ]
    },
    optimization: {
        minimize: argv.mode === 'production',
        minimizer: [new TerserPlugin()]
    },
    plugins: [
        new DashboardPlugin(),
        new HtmlWebpackPlugin({title: \`tomo webapp [\${argv.mode === 'production' ? 'production' : 'development'}]\`, template: 'assets/index.html'}),
        new SriPlugin({hashFuncNames: ['sha256'], enabled: argv.mode === 'production'}),
        new DefinePlugin({CESIUM_BASE_URL: JSON.stringify('/')}),
        new CopyWebpackPlugin({patterns: [{from: join(source, 'Workers'), to: 'Workers'},{from: join(source, 'ThirdParty'), to: 'ThirdParty'},{from: join(source, 'Assets'), to: 'Assets'},{from: join(source, 'Widgets'), to: 'Widgets'}]})
    ],
    resolve: {
        mainFields: ['module', 'main'],
        modules: [resolve(__dirname, './source'), 'node_modules'],
        extensions: ['.js'],
        alias: {}
    }
});"
`;
